/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{afterMain:()=>Me,afterRead:()=>Pe,afterWrite:()=>He,applyStyles:()=>Ue,arrow:()=>ht,auto:()=>ye,basePlacements:()=>we,beforeMain:()=>De,beforeRead:()=>Ie,beforeWrite:()=>$e,bottom:()=>_e,clippingParents:()=>Te,computeStyles:()=>mt,createPopper:()=>Rt,createPopperBase:()=>Wt,createPopperLite:()=>Ut,detectOverflow:()=>It,end:()=>Ae,eventListeners:()=>_t,flip:()=>Lt,hide:()=>jt,left:()=>be,main:()=>je,modifierPhases:()=>Fe,offset:()=>Mt,placements:()=>Ce,popper:()=>ke,popperGenerator:()=>qt,popperOffsets:()=>$t,preventOverflow:()=>Nt,read:()=>Le,reference:()=>Se,right:()=>ve,start:()=>Ee,top:()=>ge,variationPlacements:()=>Oe,viewport:()=>xe,write:()=>Ne});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},n(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}function r(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}}function o(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function s(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,r,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return s}function a(e,t,n){if(n||2===arguments.length)for(var i,r=0,o=t.length;r<o;r++)!i&&r in t||(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}function l(e){return this instanceof l?(this.v=e,this):new l(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function u(e){return"function"==typeof e}function h(e){return u(null==e?void 0:e.then)}var d,f=((d=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),d.prototype.constructor=d,d);function p(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var m=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,i,r;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var c=o(l),h=c.next();!h.done;h=c.next())h.value.remove(this)}catch(t){e={error:t}}finally{try{h&&!h.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}else l.remove(this);var d=this.initialTeardown;if(u(d))try{d()}catch(e){r=e instanceof f?e.errors:[e]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var m=o(p),g=m.next();!g.done;g=m.next()){var v=g.value;try{_(v)}catch(e){r=null!=r?r:[],e instanceof f?r=a(a([],s(r)),s(e.errors)):r.push(e)}}}catch(e){n={error:e}}finally{try{g&&!g.done&&(i=m.return)&&i.call(m)}finally{if(n)throw n.error}}}if(r)throw new f(r)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)_(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&p(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&p(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function g(e){return e instanceof m||e&&"closed"in e&&u(e.remove)&&u(e.add)&&u(e.unsubscribe)}function _(e){u(e)?e():e.unsubscribe()}m.EMPTY;var v={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var r=b.delegate;return(null==r?void 0:r.setTimeout)?r.setTimeout.apply(r,a([e,t],s(n))):setTimeout.apply(void 0,a([e,t],s(n)))},clearTimeout:function(e){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function y(e){b.setTimeout((function(){var t=v.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var E=A("C",void 0,void 0);function A(e,t,n){return{kind:e,value:t,error:n}}var T=null,x=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,g(t)&&t.add(n)):n.destination=P,n}return i(t,e),t.create=function(e,t,n){return new C(e,t,n)},t.prototype.next=function(e){this.isStopped?L(function(e){return A("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?L(A("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?L(E,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(m),k=Function.prototype.bind;function S(e,t){return k.call(e,t)}var O=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){I(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){I(e)}else I(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){I(e)}},e}(),C=function(e){function t(t,n,i){var r,o,s=e.call(this)||this;return u(t)||!t?r={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=i?i:void 0}:s&&v.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},r={next:t.next&&S(t.next,o),error:t.error&&S(t.error,o),complete:t.complete&&S(t.complete,o)}):r=t,s.destination=new O(r),s}return i(t,e),t}(x);function I(e){var t;v.useDeprecatedSynchronousErrorHandling?(t=e,v.useDeprecatedSynchronousErrorHandling&&T&&(T.errorThrown=!0,T.error=t)):y(e)}function L(e,t){var n=v.onStoppedNotification;n&&b.setTimeout((function(){return n(e,t)}))}var P={closed:!0,next:w,error:function(e){throw e},complete:w},D="function"==typeof Symbol&&Symbol.observable||"@@observable";function j(e){return e}var M=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var i,r=this,o=(i=e)&&i instanceof x||function(e){return e&&u(e.next)&&u(e.error)&&u(e.complete)}(i)&&g(i)?e:new C(e,t,n);return function(e){if(v.useDeprecatedSynchronousErrorHandling){var t=!T;if(t&&(T={errorThrown:!1,error:null}),e(),t){var n=T,i=n.errorThrown,r=n.error;if(T=null,i)throw r}}else e()}((function(){var e=r,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?r._subscribe(o):r._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=$(t))((function(t,i){var r=new C({next:function(t){try{e(t)}catch(e){i(e),r.unsubscribe()}},error:i,complete:t});n.subscribe(r)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[D]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?j:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=$(e))((function(e,n){var i;t.subscribe((function(e){return i=e}),(function(e){return n(e)}),(function(){return e(i)}))}))},e.create=function(t){return new e(t)},e}();function $(e){var t;return null!==(t=null!=e?e:v.Promise)&&void 0!==t?t:Promise}function N(e){return u(e[D])}function H(e){return Symbol.asyncIterator&&u(null==e?void 0:e[Symbol.asyncIterator])}function F(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var B="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function z(e){return u(null==e?void 0:e[B])}function q(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,r=n.apply(e,t||[]),o=[];return i={},s("next"),s("throw"),s("return"),i[Symbol.asyncIterator]=function(){return this},i;function s(e){r[e]&&(i[e]=function(t){return new Promise((function(n,i){o.push([e,t,n,i])>1||a(e,t)}))})}function a(e,t){try{(n=r[e](t)).value instanceof l?Promise.resolve(n.value.v).then(c,u):h(o[0][2],n)}catch(e){h(o[0][3],e)}var n}function c(e){a("next",e)}function u(e){a("throw",e)}function h(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var t,n,i;return r(this,(function(r){switch(r.label){case 0:t=e.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,l(t.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,l(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,l(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function W(e){return u(null==e?void 0:e.getReader)}function R(e){if(e instanceof M)return e;if(null!=e){if(N(e))return r=e,new M((function(e){var t=r[D]();if(u(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return i=e,new M((function(e){for(var t=0;t<i.length&&!e.closed;t++)e.next(i[t]);e.complete()}));if(h(e))return n=e,new M((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,y)}));if(H(e))return U(e);if(z(e))return t=e,new M((function(e){var n,i;try{for(var r=o(t),s=r.next();!s.done;s=r.next()){var a=s.value;if(e.next(a),e.closed)return}}catch(e){n={error:e}}finally{try{s&&!s.done&&(i=r.return)&&i.call(r)}finally{if(n)throw n.error}}e.complete()}));if(W(e))return U(q(e))}var t,n,i,r;throw F(e)}function U(e){return new M((function(t){(function(e,t){var n,i,s,a,l,c,u,h;return l=this,c=void 0,h=function(){var l,c;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),n=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=o(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(n){t[n]=e[n]&&function(t){return new Promise((function(i,r){!function(e,t,n,i){Promise.resolve(i).then((function(t){e({value:t,done:n})}),t)}(i,r,(t=e[n](t)).done,t.value)}))}}}(e),r.label=1;case 1:return[4,n.next()];case 2:if((i=r.sent()).done)return[3,4];if(l=i.value,t.next(l),t.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=r.sent(),s={error:c},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(a=n.return)?[4,a.call(n)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((u=void 0)||(u=Promise))((function(e,t){function n(e){try{r(h.next(e))}catch(e){t(e)}}function i(e){try{r(h.throw(e))}catch(e){t(e)}}function r(t){var r;t.done?e(t.value):(r=t.value,r instanceof u?r:new u((function(e){e(r)}))).then(n,i)}r((h=h.apply(l,c||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function V(e,t,n,i,r){void 0===i&&(i=0),void 0===r&&(r=!1);var o=t.schedule((function(){n(),r?e.add(this.schedule(null,i)):this.unsubscribe()}),i);if(e.add(o),!r)return o}function K(e){return function(t){if(function(e){return u(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Y(e,t,n,i,r){return new Q(e,t,n,i,r)}var Q=function(e){function t(t,n,i,r,o,s){var a=e.call(this,t)||this;return a.onFinalize=o,a.shouldUnsubscribe=s,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=r?function(e){try{r(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=i?function(){try{i()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return i(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(x);function X(e,t){return void 0===t&&(t=0),K((function(n,i){n.subscribe(Y(i,(function(n){return V(i,e,(function(){return i.next(n)}),t)}),(function(){return V(i,e,(function(){return i.complete()}),t)}),(function(n){return V(i,e,(function(){return i.error(n)}),t)})))}))}function G(e,t){return void 0===t&&(t=0),K((function(n,i){i.add(e.schedule((function(){return n.subscribe(i)}),t))}))}function J(e,t){if(!e)throw new Error("Iterable cannot be null");return new M((function(n){V(n,t,(function(){var i=e[Symbol.asyncIterator]();V(n,t,(function(){i.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function Z(e,t){return t?function(e,t){if(null!=e){if(N(e))return function(e,t){return R(e).pipe(G(t),X(t))}(e,t);if(c(e))return function(e,t){return new M((function(n){var i=0;return t.schedule((function(){i===e.length?n.complete():(n.next(e[i++]),n.closed||this.schedule())}))}))}(e,t);if(h(e))return function(e,t){return R(e).pipe(G(t),X(t))}(e,t);if(H(e))return J(e,t);if(z(e))return function(e,t){return new M((function(n){var i;return V(n,t,(function(){i=e[B](),V(n,t,(function(){var e,t,r;try{t=(e=i.next()).value,r=e.done}catch(e){return void n.error(e)}r?n.complete():n.next(t)}),0,!0)})),function(){return u(null==i?void 0:i.return)&&i.return()}}))}(e,t);if(W(e))return function(e,t){return J(q(e),t)}(e,t)}throw F(e)}(e,t):R(e)}function ee(e,t){return K((function(n,i){var r=0;n.subscribe(Y(i,(function(n){i.next(e.call(t,n,r++))})))}))}function te(e,t,n){return void 0===n&&(n=1/0),u(t)?te((function(n,i){return ee((function(e,r){return t(n,e,i,r)}))(R(e(n,i)))}),n):("number"==typeof t&&(n=t),K((function(t,i){return function(e,t,n,i,r,o,s,a){var l=[],c=0,u=0,h=!1,d=function(){!h||l.length||c||t.complete()},f=function(e){return c<i?p(e):l.push(e)},p=function(e){c++;var r=!1;R(n(e,u++)).subscribe(Y(t,(function(e){t.next(e)}),(function(){r=!0}),void 0,(function(){if(r)try{c--;for(;l.length&&c<i;)e=void 0,e=l.shift(),p(e);d()}catch(e){t.error(e)}var e})))};return e.subscribe(Y(t,f,(function(){h=!0,d()}))),function(){}}(t,i,e,n)})))}var ne=Array.isArray;var ie=["addListener","removeListener"],re=["addEventListener","removeEventListener"],oe=["on","off"];function se(e,t,n,i){if(u(n)&&(i=n,n=void 0),i)return se(e,t,n).pipe((r=i,ee((function(e){return function(e,t){return ne(t)?e.apply(void 0,a([],s(t))):e(t)}(r,e)}))));var r,o=s(function(e){return u(e.addEventListener)&&u(e.removeEventListener)}(e)?re.map((function(i){return function(r){return e[i](t,r,n)}})):function(e){return u(e.addListener)&&u(e.removeListener)}(e)?ie.map(ae(e,t)):function(e){return u(e.on)&&u(e.off)}(e)?oe.map(ae(e,t)):[],2),l=o[0],h=o[1];if(!l&&c(e))return te((function(e){return se(e,t,n)}))(R(e));if(!l)throw new TypeError("Invalid event target");return new M((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return l(t),function(){return h(t)}}))}function ae(e,t){return function(n){return function(i){return e[n](t,i)}}}var le=function(e){function t(t,n){return e.call(this)||this}return i(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(m),ce={setInterval:function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var r=ce.delegate;return(null==r?void 0:r.setInterval)?r.setInterval.apply(r,a([e,t],s(n))):setInterval.apply(void 0,a([e,t],s(n)))},clearInterval:function(e){var t=ce.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},ue=function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.scheduler=t,i.work=n,i.pending=!1,i}return i(t,e),t.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var i=this.id,r=this.scheduler;return null!=i&&(this.id=this.recycleAsyncId(r,i,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),ce.setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&ce.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n,i=!1;try{this.work(e)}catch(e){i=!0,n=e||new Error("Scheduled action threw falsy error")}if(i)return this.unsubscribe(),n},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,i=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(i,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(le),he={now:function(){return(he.delegate||Date).now()},delegate:void 0},de=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=he.now,e}(),fe=new(function(e){function t(t,n){void 0===n&&(n=de.now);var i=e.call(this,t,n)||this;return i.actions=[],i._active=!1,i}return i(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(de))(ue);function pe(e,t){return void 0===t&&(t=fe),K((function(n,i){var r=null,o=null,s=null,a=function(){if(r){r.unsubscribe(),r=null;var e=o;o=null,i.next(e)}};function l(){var n=s+e,o=t.now();if(o<n)return r=this.schedule(void 0,n-o),void i.add(r);a()}n.subscribe(Y(i,(function(n){o=n,s=t.now(),r||(r=t.schedule(l,e),i.add(r))}),(function(){a(),i.complete()}),void 0,(function(){o=r=null})))}))}function me(e,t){return K((function(n,i){var r=null,o=0,s=!1,a=function(){return s&&!r&&i.complete()};n.subscribe(Y(i,(function(n){null==r||r.unsubscribe();var s=0,l=o++;R(e(n,l)).subscribe(r=Y(i,(function(e){return i.next(t?t(n,e,l,s++):e)}),(function(){r=null,a()})))}),(function(){s=!0,a()})))}))}var ge="top",_e="bottom",ve="right",be="left",ye="auto",we=[ge,_e,ve,be],Ee="start",Ae="end",Te="clippingParents",xe="viewport",ke="popper",Se="reference",Oe=we.reduce((function(e,t){return e.concat([t+"-"+Ee,t+"-"+Ae])}),[]),Ce=[].concat(we,[ye]).reduce((function(e,t){return e.concat([t,t+"-"+Ee,t+"-"+Ae])}),[]),Ie="beforeRead",Le="read",Pe="afterRead",De="beforeMain",je="main",Me="afterMain",$e="beforeWrite",Ne="write",He="afterWrite",Fe=[Ie,Le,Pe,De,je,Me,$e,Ne,He];function Be(e){return e?(e.nodeName||"").toLowerCase():null}function ze(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function qe(e){return e instanceof ze(e).Element||e instanceof Element}function We(e){return e instanceof ze(e).HTMLElement||e instanceof HTMLElement}function Re(e){return"undefined"!=typeof ShadowRoot&&(e instanceof ze(e).ShadowRoot||e instanceof ShadowRoot)}const Ue={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},r=t.elements[e];We(r)&&Be(r)&&(Object.assign(r.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],r=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});We(i)&&Be(i)&&(Object.assign(i.style,o),Object.keys(r).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]};function Ve(e){return e.split("-")[0]}var Ke=Math.max,Ye=Math.min,Qe=Math.round;function Xe(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function Ge(){return!/^((?!chrome|android).)*safari/i.test(Xe())}function Je(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var i=e.getBoundingClientRect(),r=1,o=1;t&&We(e)&&(r=e.offsetWidth>0&&Qe(i.width)/e.offsetWidth||1,o=e.offsetHeight>0&&Qe(i.height)/e.offsetHeight||1);var s=(qe(e)?ze(e):window).visualViewport,a=!Ge()&&n,l=(i.left+(a&&s?s.offsetLeft:0))/r,c=(i.top+(a&&s?s.offsetTop:0))/o,u=i.width/r,h=i.height/o;return{width:u,height:h,top:c,right:l+u,bottom:c+h,left:l,x:l,y:c}}function Ze(e){var t=Je(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function et(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&Re(n)){var i=t;do{if(i&&e.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function tt(e){return ze(e).getComputedStyle(e)}function nt(e){return["table","td","th"].indexOf(Be(e))>=0}function it(e){return((qe(e)?e.ownerDocument:e.document)||window.document).documentElement}function rt(e){return"html"===Be(e)?e:e.assignedSlot||e.parentNode||(Re(e)?e.host:null)||it(e)}function ot(e){return We(e)&&"fixed"!==tt(e).position?e.offsetParent:null}function st(e){for(var t=ze(e),n=ot(e);n&&nt(n)&&"static"===tt(n).position;)n=ot(n);return n&&("html"===Be(n)||"body"===Be(n)&&"static"===tt(n).position)?t:n||function(e){var t=/firefox/i.test(Xe());if(/Trident/i.test(Xe())&&We(e)&&"fixed"===tt(e).position)return null;var n=rt(e);for(Re(n)&&(n=n.host);We(n)&&["html","body"].indexOf(Be(n))<0;){var i=tt(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}function at(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function lt(e,t,n){return Ke(e,Ye(t,n))}function ct(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function ut(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}const ht={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,r=e.options,o=n.elements.arrow,s=n.modifiersData.popperOffsets,a=Ve(n.placement),l=at(a),c=[be,ve].indexOf(a)>=0?"height":"width";if(o&&s){var u=function(e,t){return ct("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:ut(e,we))}(r.padding,n),h=Ze(o),d="y"===l?ge:be,f="y"===l?_e:ve,p=n.rects.reference[c]+n.rects.reference[l]-s[l]-n.rects.popper[c],m=s[l]-n.rects.reference[l],g=st(o),_=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,v=p/2-m/2,b=u[d],y=_-h[c]-u[f],w=_/2-h[c]/2+v,E=lt(b,w,y),A=l;n.modifiersData[i]=((t={})[A]=E,t.centerOffset=E-w,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&et(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function dt(e){return e.split("-")[1]}var ft={top:"auto",right:"auto",bottom:"auto",left:"auto"};function pt(e){var t,n=e.popper,i=e.popperRect,r=e.placement,o=e.variation,s=e.offsets,a=e.position,l=e.gpuAcceleration,c=e.adaptive,u=e.roundOffsets,h=e.isFixed,d=s.x,f=void 0===d?0:d,p=s.y,m=void 0===p?0:p,g="function"==typeof u?u({x:f,y:m}):{x:f,y:m};f=g.x,m=g.y;var _=s.hasOwnProperty("x"),v=s.hasOwnProperty("y"),b=be,y=ge,w=window;if(c){var E=st(n),A="clientHeight",T="clientWidth";E===ze(n)&&"static"!==tt(E=it(n)).position&&"absolute"===a&&(A="scrollHeight",T="scrollWidth"),(r===ge||(r===be||r===ve)&&o===Ae)&&(y=_e,m-=(h&&E===w&&w.visualViewport?w.visualViewport.height:E[A])-i.height,m*=l?1:-1),r!==be&&(r!==ge&&r!==_e||o!==Ae)||(b=ve,f-=(h&&E===w&&w.visualViewport?w.visualViewport.width:E[T])-i.width,f*=l?1:-1)}var x,k=Object.assign({position:a},c&&ft),S=!0===u?function(e,t){var n=e.x,i=e.y,r=t.devicePixelRatio||1;return{x:Qe(n*r)/r||0,y:Qe(i*r)/r||0}}({x:f,y:m},ze(n)):{x:f,y:m};return f=S.x,m=S.y,l?Object.assign({},k,((x={})[y]=v?"0":"",x[b]=_?"0":"",x.transform=(w.devicePixelRatio||1)<=1?"translate("+f+"px, "+m+"px)":"translate3d("+f+"px, "+m+"px, 0)",x)):Object.assign({},k,((t={})[y]=v?m+"px":"",t[b]=_?f+"px":"",t.transform="",t))}const mt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,r=void 0===i||i,o=n.adaptive,s=void 0===o||o,a=n.roundOffsets,l=void 0===a||a,c={placement:Ve(t.placement),variation:dt(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,pt(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,pt(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var gt={passive:!0};const _t={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,r=i.scroll,o=void 0===r||r,s=i.resize,a=void 0===s||s,l=ze(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&c.forEach((function(e){e.addEventListener("scroll",n.update,gt)})),a&&l.addEventListener("resize",n.update,gt),function(){o&&c.forEach((function(e){e.removeEventListener("scroll",n.update,gt)})),a&&l.removeEventListener("resize",n.update,gt)}},data:{}};var vt={left:"right",right:"left",bottom:"top",top:"bottom"};function bt(e){return e.replace(/left|right|bottom|top/g,(function(e){return vt[e]}))}var yt={start:"end",end:"start"};function wt(e){return e.replace(/start|end/g,(function(e){return yt[e]}))}function Et(e){var t=ze(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function At(e){return Je(it(e)).left+Et(e).scrollLeft}function Tt(e){var t=tt(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+i)}function xt(e){return["html","body","#document"].indexOf(Be(e))>=0?e.ownerDocument.body:We(e)&&Tt(e)?e:xt(rt(e))}function kt(e,t){var n;void 0===t&&(t=[]);var i=xt(e),r=i===(null==(n=e.ownerDocument)?void 0:n.body),o=ze(i),s=r?[o].concat(o.visualViewport||[],Tt(i)?i:[]):i,a=t.concat(s);return r?a:a.concat(kt(rt(s)))}function St(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Ot(e,t,n){return t===xe?St(function(e,t){var n=ze(e),i=it(e),r=n.visualViewport,o=i.clientWidth,s=i.clientHeight,a=0,l=0;if(r){o=r.width,s=r.height;var c=Ge();(c||!c&&"fixed"===t)&&(a=r.offsetLeft,l=r.offsetTop)}return{width:o,height:s,x:a+At(e),y:l}}(e,n)):qe(t)?function(e,t){var n=Je(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):St(function(e){var t,n=it(e),i=Et(e),r=null==(t=e.ownerDocument)?void 0:t.body,o=Ke(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),s=Ke(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),a=-i.scrollLeft+At(e),l=-i.scrollTop;return"rtl"===tt(r||n).direction&&(a+=Ke(n.clientWidth,r?r.clientWidth:0)-o),{width:o,height:s,x:a,y:l}}(it(e)))}function Ct(e){var t,n=e.reference,i=e.element,r=e.placement,o=r?Ve(r):null,s=r?dt(r):null,a=n.x+n.width/2-i.width/2,l=n.y+n.height/2-i.height/2;switch(o){case ge:t={x:a,y:n.y-i.height};break;case _e:t={x:a,y:n.y+n.height};break;case ve:t={x:n.x+n.width,y:l};break;case be:t={x:n.x-i.width,y:l};break;default:t={x:n.x,y:n.y}}var c=o?at(o):null;if(null!=c){var u="y"===c?"height":"width";switch(s){case Ee:t[c]=t[c]-(n[u]/2-i[u]/2);break;case Ae:t[c]=t[c]+(n[u]/2-i[u]/2)}}return t}function It(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=void 0===i?e.placement:i,o=n.strategy,s=void 0===o?e.strategy:o,a=n.boundary,l=void 0===a?Te:a,c=n.rootBoundary,u=void 0===c?xe:c,h=n.elementContext,d=void 0===h?ke:h,f=n.altBoundary,p=void 0!==f&&f,m=n.padding,g=void 0===m?0:m,_=ct("number"!=typeof g?g:ut(g,we)),v=d===ke?Se:ke,b=e.rects.popper,y=e.elements[p?v:d],w=function(e,t,n,i){var r="clippingParents"===t?function(e){var t=kt(rt(e)),n=["absolute","fixed"].indexOf(tt(e).position)>=0&&We(e)?st(e):e;return qe(n)?t.filter((function(e){return qe(e)&&et(e,n)&&"body"!==Be(e)})):[]}(e):[].concat(t),o=[].concat(r,[n]),s=o[0],a=o.reduce((function(t,n){var r=Ot(e,n,i);return t.top=Ke(r.top,t.top),t.right=Ye(r.right,t.right),t.bottom=Ye(r.bottom,t.bottom),t.left=Ke(r.left,t.left),t}),Ot(e,s,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(qe(y)?y:y.contextElement||it(e.elements.popper),l,u,s),E=Je(e.elements.reference),A=Ct({reference:E,element:b,strategy:"absolute",placement:r}),T=St(Object.assign({},b,A)),x=d===ke?T:E,k={top:w.top-x.top+_.top,bottom:x.bottom-w.bottom+_.bottom,left:w.left-x.left+_.left,right:x.right-w.right+_.right},S=e.modifiersData.offset;if(d===ke&&S){var O=S[r];Object.keys(k).forEach((function(e){var t=[ve,_e].indexOf(e)>=0?1:-1,n=[ge,_e].indexOf(e)>=0?"y":"x";k[e]+=O[n]*t}))}return k}const Lt={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name;if(!t.modifiersData[i]._skip){for(var r=n.mainAxis,o=void 0===r||r,s=n.altAxis,a=void 0===s||s,l=n.fallbackPlacements,c=n.padding,u=n.boundary,h=n.rootBoundary,d=n.altBoundary,f=n.flipVariations,p=void 0===f||f,m=n.allowedAutoPlacements,g=t.options.placement,_=Ve(g),v=l||(_!==g&&p?function(e){if(Ve(e)===ye)return[];var t=bt(e);return[wt(e),t,wt(t)]}(g):[bt(g)]),b=[g].concat(v).reduce((function(e,n){return e.concat(Ve(n)===ye?function(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=n.boundary,o=n.rootBoundary,s=n.padding,a=n.flipVariations,l=n.allowedAutoPlacements,c=void 0===l?Ce:l,u=dt(i),h=u?a?Oe:Oe.filter((function(e){return dt(e)===u})):we,d=h.filter((function(e){return c.indexOf(e)>=0}));0===d.length&&(d=h);var f=d.reduce((function(t,n){return t[n]=It(e,{placement:n,boundary:r,rootBoundary:o,padding:s})[Ve(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:n,boundary:u,rootBoundary:h,padding:c,flipVariations:p,allowedAutoPlacements:m}):n)}),[]),y=t.rects.reference,w=t.rects.popper,E=new Map,A=!0,T=b[0],x=0;x<b.length;x++){var k=b[x],S=Ve(k),O=dt(k)===Ee,C=[ge,_e].indexOf(S)>=0,I=C?"width":"height",L=It(t,{placement:k,boundary:u,rootBoundary:h,altBoundary:d,padding:c}),P=C?O?ve:be:O?_e:ge;y[I]>w[I]&&(P=bt(P));var D=bt(P),j=[];if(o&&j.push(L[S]<=0),a&&j.push(L[P]<=0,L[D]<=0),j.every((function(e){return e}))){T=k,A=!1;break}E.set(k,j)}if(A)for(var M=function(e){var t=b.find((function(t){var n=E.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return T=t,"break"},$=p?3:1;$>0&&"break"!==M($);$--);t.placement!==T&&(t.modifiersData[i]._skip=!0,t.placement=T,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function Pt(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function Dt(e){return[ge,ve,_e,be].some((function(t){return e[t]>=0}))}const jt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,r=t.rects.popper,o=t.modifiersData.preventOverflow,s=It(t,{elementContext:"reference"}),a=It(t,{altBoundary:!0}),l=Pt(s,i),c=Pt(a,r,o),u=Dt(l),h=Dt(c);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:h},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":h})}},Mt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.offset,o=void 0===r?[0,0]:r,s=Ce.reduce((function(e,n){return e[n]=function(e,t,n){var i=Ve(e),r=[be,ge].indexOf(i)>=0?-1:1,o="function"==typeof n?n(Object.assign({},t,{placement:e})):n,s=o[0],a=o[1];return s=s||0,a=(a||0)*r,[be,ve].indexOf(i)>=0?{x:a,y:s}:{x:s,y:a}}(n,t.rects,o),e}),{}),a=s[t.placement],l=a.x,c=a.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=c),t.modifiersData[i]=s}},$t={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=Ct({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},Nt={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.mainAxis,o=void 0===r||r,s=n.altAxis,a=void 0!==s&&s,l=n.boundary,c=n.rootBoundary,u=n.altBoundary,h=n.padding,d=n.tether,f=void 0===d||d,p=n.tetherOffset,m=void 0===p?0:p,g=It(t,{boundary:l,rootBoundary:c,padding:h,altBoundary:u}),_=Ve(t.placement),v=dt(t.placement),b=!v,y=at(_),w="x"===y?"y":"x",E=t.modifiersData.popperOffsets,A=t.rects.reference,T=t.rects.popper,x="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,k="number"==typeof x?{mainAxis:x,altAxis:x}:Object.assign({mainAxis:0,altAxis:0},x),S=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,O={x:0,y:0};if(E){if(o){var C,I="y"===y?ge:be,L="y"===y?_e:ve,P="y"===y?"height":"width",D=E[y],j=D+g[I],M=D-g[L],$=f?-T[P]/2:0,N=v===Ee?A[P]:T[P],H=v===Ee?-T[P]:-A[P],F=t.elements.arrow,B=f&&F?Ze(F):{width:0,height:0},z=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},q=z[I],W=z[L],R=lt(0,A[P],B[P]),U=b?A[P]/2-$-R-q-k.mainAxis:N-R-q-k.mainAxis,V=b?-A[P]/2+$+R+W+k.mainAxis:H+R+W+k.mainAxis,K=t.elements.arrow&&st(t.elements.arrow),Y=K?"y"===y?K.clientTop||0:K.clientLeft||0:0,Q=null!=(C=null==S?void 0:S[y])?C:0,X=D+V-Q,G=lt(f?Ye(j,D+U-Q-Y):j,D,f?Ke(M,X):M);E[y]=G,O[y]=G-D}if(a){var J,Z="x"===y?ge:be,ee="x"===y?_e:ve,te=E[w],ne="y"===w?"height":"width",ie=te+g[Z],re=te-g[ee],oe=-1!==[ge,be].indexOf(_),se=null!=(J=null==S?void 0:S[w])?J:0,ae=oe?ie:te-A[ne]-T[ne]-se+k.altAxis,le=oe?te+A[ne]+T[ne]-se-k.altAxis:re,ce=f&&oe?function(e,t,n){var i=lt(e,t,n);return i>n?n:i}(ae,te,le):lt(f?ae:ie,te,f?le:re);E[w]=ce,O[w]=ce-te}t.modifiersData[i]=O}},requiresIfExists:["offset"]};function Ht(e,t,n){void 0===n&&(n=!1);var i,r,o=We(t),s=We(t)&&function(e){var t=e.getBoundingClientRect(),n=Qe(t.width)/e.offsetWidth||1,i=Qe(t.height)/e.offsetHeight||1;return 1!==n||1!==i}(t),a=it(t),l=Je(e,s,n),c={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(o||!o&&!n)&&(("body"!==Be(t)||Tt(a))&&(c=(i=t)!==ze(i)&&We(i)?{scrollLeft:(r=i).scrollLeft,scrollTop:r.scrollTop}:Et(i)),We(t)?((u=Je(t,!0)).x+=t.clientLeft,u.y+=t.clientTop):a&&(u.x=At(a))),{x:l.left+c.scrollLeft-u.x,y:l.top+c.scrollTop-u.y,width:l.width,height:l.height}}function Ft(e){var t=new Map,n=new Set,i=[];function r(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&r(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||r(e)})),i}var Bt={placement:"bottom",modifiers:[],strategy:"absolute"};function zt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function qt(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,i=void 0===n?[]:n,r=t.defaultOptions,o=void 0===r?Bt:r;return function(e,t,n){void 0===n&&(n=o);var r,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Bt,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,u={state:a,setOptions:function(n){var r="function"==typeof n?n(a.options):n;h(),a.options=Object.assign({},o,a.options,r),a.scrollParents={reference:qe(e)?kt(e):e.contextElement?kt(e.contextElement):[],popper:kt(t)};var s,c,d=function(e){var t=Ft(e);return Fe.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((s=[].concat(i,a.options.modifiers),c=s.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=d.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,r=e.effect;if("function"==typeof r){var o=r({state:a,name:t,instance:u,options:i});l.push(o||function(){})}})),u.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,n=e.popper;if(zt(t,n)){a.rects={reference:Ht(t,st(n),"fixed"===a.options.strategy),popper:Ze(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var r=a.orderedModifiers[i],o=r.fn,s=r.options,l=void 0===s?{}:s,h=r.name;"function"==typeof o&&(a=o({state:a,options:l,name:h,instance:u})||a)}else a.reset=!1,i=-1}}},update:(r=function(){return new Promise((function(e){u.forceUpdate(),e(a)}))},function(){return s||(s=new Promise((function(e){Promise.resolve().then((function(){s=void 0,e(r())}))}))),s}),destroy:function(){h(),c=!0}};if(!zt(e,t))return u;function h(){l.forEach((function(e){return e()})),l=[]}return u.setOptions(n).then((function(e){!c&&n.onFirstUpdate&&n.onFirstUpdate(e)})),u}}var Wt=qt(),Rt=qt({defaultModifiers:[_t,$t,mt,Ue,Mt,Lt,Nt,ht,jt]}),Ut=qt({defaultModifiers:[_t,$t,mt,Ue]});const Vt=new Map,Kt={set(e,t,n){Vt.has(e)||Vt.set(e,new Map);const i=Vt.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(e,t)=>Vt.has(e)&&Vt.get(e).get(t)||null,remove(e,t){if(!Vt.has(e))return;const n=Vt.get(e);n.delete(t),0===n.size&&Vt.delete(e)}},Yt="transitionend",Qt=e=>(e&&window.CSS&&window.CSS.escape&&(e=e.replace(/#([^\s"#']+)/g,((e,t)=>`#${CSS.escape(t)}`))),e),Xt=e=>{e.dispatchEvent(new Event(Yt))},Gt=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),Jt=e=>Gt(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(Qt(e)):null,Zt=e=>{if(!Gt(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(!n)return t;if(n!==e){const t=e.closest("summary");if(t&&t.parentNode!==n)return!1;if(null===t)return!1}return t},en=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),tn=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?tn(e.parentNode):null},nn=()=>{},rn=e=>{e.offsetHeight},on=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,sn=[],an=()=>"rtl"===document.documentElement.dir,ln=e=>{var t;t=()=>{const t=on();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}},"loading"===document.readyState?(sn.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of sn)e()})),sn.push(t)):t()},cn=(e,t=[],n=e)=>"function"==typeof e?e(...t):n,un=(e,t,n=!0)=>{if(!n)return void cn(e);const i=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),r=Number.parseFloat(n);return i||r?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0})(t)+5;let r=!1;const o=({target:n})=>{n===t&&(r=!0,t.removeEventListener(Yt,o),cn(e))};t.addEventListener(Yt,o),setTimeout((()=>{r||Xt(t)}),i)},hn=(e,t,n,i)=>{const r=e.length;let o=e.indexOf(t);return-1===o?!n&&i?e[r-1]:e[0]:(o+=n?1:-1,i&&(o=(o+r)%r),e[Math.max(0,Math.min(o,r-1))])},dn=/[^.]*(?=\..*)\.|.*/,fn=/\..*/,pn=/::\d+$/,mn={};let gn=1;const _n={mouseenter:"mouseover",mouseleave:"mouseout"},vn=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function bn(e,t){return t&&`${t}::${gn++}`||e.uidEvent||gn++}function yn(e){const t=bn(e);return e.uidEvent=t,mn[t]=mn[t]||{},mn[t]}function wn(e,t,n=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===n))}function En(e,t,n){const i="string"==typeof t,r=i?n:t||n;let o=kn(e);return vn.has(o)||(o=e),[i,r,o]}function An(e,t,n,i,r){if("string"!=typeof t||!e)return;let[o,s,a]=En(t,n,i);if(t in _n){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};s=e(s)}const l=yn(e),c=l[a]||(l[a]={}),u=wn(c,s,o?n:null);if(u)return void(u.oneOff=u.oneOff&&r);const h=bn(s,t.replace(dn,"")),d=o?function(e,t,n){return function i(r){const o=e.querySelectorAll(t);for(let{target:s}=r;s&&s!==this;s=s.parentNode)for(const a of o)if(a===s)return On(r,{delegateTarget:s}),i.oneOff&&Sn.off(e,r.type,t,n),n.apply(s,[r])}}(e,n,s):function(e,t){return function n(i){return On(i,{delegateTarget:e}),n.oneOff&&Sn.off(e,i.type,t),t.apply(e,[i])}}(e,s);d.delegationSelector=o?n:null,d.callable=s,d.oneOff=r,d.uidEvent=h,c[h]=d,e.addEventListener(a,d,o)}function Tn(e,t,n,i,r){const o=wn(t[n],i,r);o&&(e.removeEventListener(n,o,Boolean(r)),delete t[n][o.uidEvent])}function xn(e,t,n,i){const r=t[n]||{};for(const[o,s]of Object.entries(r))o.includes(i)&&Tn(e,t,n,s.callable,s.delegationSelector)}function kn(e){return e=e.replace(fn,""),_n[e]||e}const Sn={on(e,t,n,i){An(e,t,n,i,!1)},one(e,t,n,i){An(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[r,o,s]=En(t,n,i),a=s!==t,l=yn(e),c=l[s]||{},u=t.startsWith(".");if(void 0===o){if(u)for(const n of Object.keys(l))xn(e,l,n,t.slice(1));for(const[n,i]of Object.entries(c)){const r=n.replace(pn,"");a&&!t.includes(r)||Tn(e,l,s,i.callable,i.delegationSelector)}}else{if(!Object.keys(c).length)return;Tn(e,l,s,o,r?n:null)}},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=on();let r=null,o=!0,s=!0,a=!1;t!==kn(t)&&i&&(r=i.Event(t,n),i(e).trigger(r),o=!r.isPropagationStopped(),s=!r.isImmediatePropagationStopped(),a=r.isDefaultPrevented());const l=On(new Event(t,{bubbles:o,cancelable:!0}),n);return a&&l.preventDefault(),s&&e.dispatchEvent(l),l.defaultPrevented&&r&&r.preventDefault(),l}};function On(e,t={}){for(const[n,i]of Object.entries(t))try{e[n]=i}catch(t){Object.defineProperty(e,n,{configurable:!0,get:()=>i})}return e}function Cn(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function In(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const Ln={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${In(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${In(t)}`)},getDataAttributes(e){if(!e)return{};const t={},n=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=Cn(e.dataset[i])}return t},getDataAttribute:(e,t)=>Cn(e.getAttribute(`data-bs-${In(t)}`))};class Pn{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const n=Gt(t)?Ln.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...Gt(t)?Ln.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const[i,r]of Object.entries(t)){const t=e[i],o=Gt(t)?"element":null==(n=t)?`${n}`:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(r).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${o}" but expected type "${r}".`)}var n}}class Dn extends Pn{constructor(e,t){super(),(e=Jt(e))&&(this._element=e,this._config=this._getConfig(t),Kt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){Kt.remove(this._element,this.constructor.DATA_KEY),Sn.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,n=!0){un(e,t,n)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return Kt.get(Jt(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.3.1"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const jn=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?n.trim():null}return Qt(t)},Mn={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const n=[];let i=e.parentNode.closest(t);for(;i;)n.push(i),i=i.parentNode.closest(t);return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!en(e)&&Zt(e)))},getSelectorFromElement(e){const t=jn(e);return t&&Mn.findOne(t)?t:null},getElementFromSelector(e){const t=jn(e);return t?Mn.findOne(t):null},getMultipleElementsFromSelector(e){const t=jn(e);return t?Mn.find(t):[]}},$n=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,i=e.NAME;Sn.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),en(this))return;const r=Mn.getElementFromSelector(this)||this.closest(`.${i}`);e.getOrCreateInstance(r)[t]()}))},Nn=".bs.alert",Hn=`close${Nn}`,Fn=`closed${Nn}`;class Bn extends Dn{static get NAME(){return"alert"}close(){if(Sn.trigger(this._element,Hn).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),Sn.trigger(this._element,Fn),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=Bn.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}$n(Bn,"close"),ln(Bn);const zn='[data-bs-toggle="button"]';class qn extends Dn{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=qn.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}Sn.on(document,"click.bs.button.data-api",zn,(e=>{e.preventDefault();const t=e.target.closest(zn);qn.getOrCreateInstance(t).toggle()})),ln(qn);const Wn=".bs.swipe",Rn=`touchstart${Wn}`,Un=`touchmove${Wn}`,Vn=`touchend${Wn}`,Kn=`pointerdown${Wn}`,Yn=`pointerup${Wn}`,Qn={endCallback:null,leftCallback:null,rightCallback:null},Xn={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class Gn extends Pn{constructor(e,t){super(),this._element=e,e&&Gn.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Qn}static get DefaultType(){return Xn}static get NAME(){return"swipe"}dispose(){Sn.off(this._element,Wn)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),cn(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&cn(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(Sn.on(this._element,Kn,(e=>this._start(e))),Sn.on(this._element,Yn,(e=>this._end(e))),this._element.classList.add("pointer-event")):(Sn.on(this._element,Rn,(e=>this._start(e))),Sn.on(this._element,Un,(e=>this._move(e))),Sn.on(this._element,Vn,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const Jn=".bs.carousel",Zn=".data-api",ei="next",ti="prev",ni="left",ii="right",ri=`slide${Jn}`,oi=`slid${Jn}`,si=`keydown${Jn}`,ai=`mouseenter${Jn}`,li=`mouseleave${Jn}`,ci=`dragstart${Jn}`,ui=`load${Jn}${Zn}`,hi=`click${Jn}${Zn}`,di="carousel",fi="active",pi=".active",mi=".carousel-item",gi=pi+mi,_i={ArrowLeft:ii,ArrowRight:ni},vi={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},bi={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class yi extends Dn{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=Mn.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===di&&this.cycle()}static get Default(){return vi}static get DefaultType(){return bi}static get NAME(){return"carousel"}next(){this._slide(ei)}nextWhenVisible(){!document.hidden&&Zt(this._element)&&this.next()}prev(){this._slide(ti)}pause(){this._isSliding&&Xt(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?Sn.one(this._element,oi,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void Sn.one(this._element,oi,(()=>this.to(e)));const n=this._getItemIndex(this._getActive());if(n===e)return;const i=e>n?ei:ti;this._slide(i,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&Sn.on(this._element,si,(e=>this._keydown(e))),"hover"===this._config.pause&&(Sn.on(this._element,ai,(()=>this.pause())),Sn.on(this._element,li,(()=>this._maybeEnableCycle()))),this._config.touch&&Gn.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of Mn.find(".carousel-item img",this._element))Sn.on(e,ci,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(ni)),rightCallback:()=>this._slide(this._directionToOrder(ii)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new Gn(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=_i[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=Mn.findOne(pi,this._indicatorsElement);t.classList.remove(fi),t.removeAttribute("aria-current");const n=Mn.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);n&&(n.classList.add(fi),n.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const n=this._getActive(),i=e===ei,r=t||hn(this._getItems(),n,i,this._config.wrap);if(r===n)return;const o=this._getItemIndex(r),s=t=>Sn.trigger(this._element,t,{relatedTarget:r,direction:this._orderToDirection(e),from:this._getItemIndex(n),to:o});if(s(ri).defaultPrevented)return;if(!n||!r)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=r;const l=i?"carousel-item-start":"carousel-item-end",c=i?"carousel-item-next":"carousel-item-prev";r.classList.add(c),rn(r),n.classList.add(l),r.classList.add(l),this._queueCallback((()=>{r.classList.remove(l,c),r.classList.add(fi),n.classList.remove(fi,c,l),this._isSliding=!1,s(oi)}),n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return Mn.findOne(gi,this._element)}_getItems(){return Mn.find(mi,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return an()?e===ni?ti:ei:e===ni?ei:ti}_orderToDirection(e){return an()?e===ti?ni:ii:e===ti?ii:ni}static jQueryInterface(e){return this.each((function(){const t=yi.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}Sn.on(document,hi,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=Mn.getElementFromSelector(this);if(!t||!t.classList.contains(di))return;e.preventDefault();const n=yi.getOrCreateInstance(t),i=this.getAttribute("data-bs-slide-to");return i?(n.to(i),void n._maybeEnableCycle()):"next"===Ln.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),Sn.on(window,ui,(()=>{const e=Mn.find('[data-bs-ride="carousel"]');for(const t of e)yi.getOrCreateInstance(t)})),ln(yi);const wi=".bs.collapse",Ei=`show${wi}`,Ai=`shown${wi}`,Ti=`hide${wi}`,xi=`hidden${wi}`,ki=`click${wi}.data-api`,Si="show",Oi="collapse",Ci="collapsing",Ii=`:scope .${Oi} .${Oi}`,Li='[data-bs-toggle="collapse"]',Pi={parent:null,toggle:!0},Di={parent:"(null|element)",toggle:"boolean"};class ji extends Dn{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const n=Mn.find(Li);for(const e of n){const t=Mn.getSelectorFromElement(e),n=Mn.find(t).filter((e=>e===this._element));null!==t&&n.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Pi}static get DefaultType(){return Di}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>ji.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(Sn.trigger(this._element,Ei).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(Oi),this._element.classList.add(Ci),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Ci),this._element.classList.add(Oi,Si),this._element.style[t]="",Sn.trigger(this._element,Ai)}),this._element,!0),this._element.style[t]=`${this._element[n]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(Sn.trigger(this._element,Ti).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,rn(this._element),this._element.classList.add(Ci),this._element.classList.remove(Oi,Si);for(const e of this._triggerArray){const t=Mn.getElementFromSelector(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Ci),this._element.classList.add(Oi),Sn.trigger(this._element,xi)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Si)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=Jt(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(Li);for(const t of e){const e=Mn.getElementFromSelector(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=Mn.find(Ii,this._config.parent);return Mn.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const n of e)n.classList.toggle("collapsed",!t),n.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const n=ji.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}Sn.on(document,ki,Li,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();for(const e of Mn.getMultipleElementsFromSelector(this))ji.getOrCreateInstance(e,{toggle:!1}).toggle()})),ln(ji);const Mi="dropdown",$i=".bs.dropdown",Ni=".data-api",Hi="ArrowUp",Fi="ArrowDown",Bi=`hide${$i}`,zi=`hidden${$i}`,qi=`show${$i}`,Wi=`shown${$i}`,Ri=`click${$i}${Ni}`,Ui=`keydown${$i}${Ni}`,Vi=`keyup${$i}${Ni}`,Ki="show",Yi='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Qi=`${Yi}.${Ki}`,Xi=".dropdown-menu",Gi=an()?"top-end":"top-start",Ji=an()?"top-start":"top-end",Zi=an()?"bottom-end":"bottom-start",er=an()?"bottom-start":"bottom-end",tr=an()?"left-start":"right-start",nr=an()?"right-start":"left-start",ir={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},rr={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class or extends Dn{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=Mn.next(this._element,Xi)[0]||Mn.prev(this._element,Xi)[0]||Mn.findOne(Xi,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return ir}static get DefaultType(){return rr}static get NAME(){return Mi}toggle(){return this._isShown()?this.hide():this.show()}show(){if(en(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!Sn.trigger(this._element,qi,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))Sn.on(e,"mouseover",nn);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Ki),this._element.classList.add(Ki),Sn.trigger(this._element,Wi,e)}}hide(){if(en(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!Sn.trigger(this._element,Bi,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))Sn.off(e,"mouseover",nn);this._popper&&this._popper.destroy(),this._menu.classList.remove(Ki),this._element.classList.remove(Ki),this._element.setAttribute("aria-expanded","false"),Ln.removeDataAttribute(this._menu,"popper"),Sn.trigger(this._element,zi,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!Gt(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Mi.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:Gt(this._config.reference)?e=Jt(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const n=this._getPopperConfig();this._popper=Rt(e,this._menu,n)}_isShown(){return this._menu.classList.contains(Ki)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return tr;if(e.classList.contains("dropstart"))return nr;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?Ji:Gi:t?er:Zi}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(Ln.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...cn(this._config.popperConfig,[e])}}_selectMenuItem({key:e,target:t}){const n=Mn.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>Zt(e)));n.length&&hn(n,t,e===Fi,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=or.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=Mn.find(Qi);for(const n of t){const t=or.getInstance(n);if(!t||!1===t._config.autoClose)continue;const i=e.composedPath(),r=i.includes(t._menu);if(i.includes(t._element)||"inside"===t._config.autoClose&&!r||"outside"===t._config.autoClose&&r)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const o={relatedTarget:t._element};"click"===e.type&&(o.clickEvent=e),t._completeHide(o)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),n="Escape"===e.key,i=[Hi,Fi].includes(e.key);if(!i&&!n)return;if(t&&!n)return;e.preventDefault();const r=this.matches(Yi)?this:Mn.prev(this,Yi)[0]||Mn.next(this,Yi)[0]||Mn.findOne(Yi,e.delegateTarget.parentNode),o=or.getOrCreateInstance(r);if(i)return e.stopPropagation(),o.show(),void o._selectMenuItem(e);o._isShown()&&(e.stopPropagation(),o.hide(),r.focus())}}Sn.on(document,Ui,Yi,or.dataApiKeydownHandler),Sn.on(document,Ui,Xi,or.dataApiKeydownHandler),Sn.on(document,Ri,or.clearMenus),Sn.on(document,Vi,or.clearMenus),Sn.on(document,Ri,Yi,(function(e){e.preventDefault(),or.getOrCreateInstance(this).toggle()})),ln(or);const sr="backdrop",ar="show",lr=`mousedown.bs.${sr}`,cr={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},ur={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class hr extends Pn{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return cr}static get DefaultType(){return ur}static get NAME(){return sr}show(e){if(!this._config.isVisible)return void cn(e);this._append();const t=this._getElement();this._config.isAnimated&&rn(t),t.classList.add(ar),this._emulateAnimation((()=>{cn(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(ar),this._emulateAnimation((()=>{this.dispose(),cn(e)}))):cn(e)}dispose(){this._isAppended&&(Sn.off(this._element,lr),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=Jt(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),Sn.on(e,lr,(()=>{cn(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){un(e,this._getElement(),this._config.isAnimated)}}const dr=".bs.focustrap",fr=`focusin${dr}`,pr=`keydown.tab${dr}`,mr="backward",gr={autofocus:!0,trapElement:null},_r={autofocus:"boolean",trapElement:"element"};class vr extends Pn{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return gr}static get DefaultType(){return _r}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),Sn.off(document,dr),Sn.on(document,fr,(e=>this._handleFocusin(e))),Sn.on(document,pr,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,Sn.off(document,dr))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const n=Mn.focusableChildren(t);0===n.length?t.focus():this._lastTabNavDirection===mr?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?mr:"forward")}}const br=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",yr=".sticky-top",wr="padding-right",Er="margin-right";class Ar{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,wr,(t=>t+e)),this._setElementAttributes(br,wr,(t=>t+e)),this._setElementAttributes(yr,Er,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,wr),this._resetElementAttributes(br,wr),this._resetElementAttributes(yr,Er)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const r=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${n(Number.parseFloat(r))}px`)}))}_saveInitialAttribute(e,t){const n=e.style.getPropertyValue(t);n&&Ln.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const n=Ln.getDataAttribute(e,t);null!==n?(Ln.removeDataAttribute(e,t),e.style.setProperty(t,n)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(Gt(e))t(e);else for(const n of Mn.find(e,this._element))t(n)}}const Tr=".bs.modal",xr=`hide${Tr}`,kr=`hidePrevented${Tr}`,Sr=`hidden${Tr}`,Or=`show${Tr}`,Cr=`shown${Tr}`,Ir=`resize${Tr}`,Lr=`click.dismiss${Tr}`,Pr=`mousedown.dismiss${Tr}`,Dr=`keydown.dismiss${Tr}`,jr=`click${Tr}.data-api`,Mr="modal-open",$r="show",Nr="modal-static",Hr={backdrop:!0,focus:!0,keyboard:!0},Fr={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Br extends Dn{constructor(e,t){super(e,t),this._dialog=Mn.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Ar,this._addEventListeners()}static get Default(){return Hr}static get DefaultType(){return Fr}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||Sn.trigger(this._element,Or,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Mr),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){this._isShown&&!this._isTransitioning&&(Sn.trigger(this._element,xr).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove($r),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){Sn.off(window,Tr),Sn.off(this._dialog,Tr),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new hr({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new vr({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=Mn.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),rn(this._element),this._element.classList.add($r),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,Sn.trigger(this._element,Cr,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){Sn.on(this._element,Dr,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),Sn.on(window,Ir,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),Sn.on(this._element,Pr,(e=>{Sn.one(this._element,Lr,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Mr),this._resetAdjustments(),this._scrollBar.reset(),Sn.trigger(this._element,Sr)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(Sn.trigger(this._element,kr).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Nr)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Nr),this._queueCallback((()=>{this._element.classList.remove(Nr),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;if(n&&!e){const e=an()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!n&&e){const e=an()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=Br.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}Sn.on(document,jr,'[data-bs-toggle="modal"]',(function(e){const t=Mn.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),Sn.one(t,Or,(e=>{e.defaultPrevented||Sn.one(t,Sr,(()=>{Zt(this)&&this.focus()}))}));const n=Mn.findOne(".modal.show");n&&Br.getInstance(n).hide(),Br.getOrCreateInstance(t).toggle(this)})),$n(Br),ln(Br);const zr=".bs.offcanvas",qr=".data-api",Wr=`load${zr}${qr}`,Rr="show",Ur="showing",Vr="hiding",Kr=".offcanvas.show",Yr=`show${zr}`,Qr=`shown${zr}`,Xr=`hide${zr}`,Gr=`hidePrevented${zr}`,Jr=`hidden${zr}`,Zr=`resize${zr}`,eo=`click${zr}${qr}`,to=`keydown.dismiss${zr}`,no={backdrop:!0,keyboard:!0,scroll:!1},io={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class ro extends Dn{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return no}static get DefaultType(){return io}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||Sn.trigger(this._element,Yr,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Ar).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Ur),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(Rr),this._element.classList.remove(Ur),Sn.trigger(this._element,Qr,{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(Sn.trigger(this._element,Xr).defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(Vr),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove(Rr,Vr),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Ar).reset(),Sn.trigger(this._element,Jr)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new hr({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():Sn.trigger(this._element,Gr)}:null})}_initializeFocusTrap(){return new vr({trapElement:this._element})}_addEventListeners(){Sn.on(this._element,to,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():Sn.trigger(this._element,Gr))}))}static jQueryInterface(e){return this.each((function(){const t=ro.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Sn.on(document,eo,'[data-bs-toggle="offcanvas"]',(function(e){const t=Mn.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),en(this))return;Sn.one(t,Jr,(()=>{Zt(this)&&this.focus()}));const n=Mn.findOne(Kr);n&&n!==t&&ro.getInstance(n).hide(),ro.getOrCreateInstance(t).toggle(this)})),Sn.on(window,Wr,(()=>{for(const e of Mn.find(Kr))ro.getOrCreateInstance(e).show()})),Sn.on(window,Zr,(()=>{for(const e of Mn.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&ro.getOrCreateInstance(e).hide()})),$n(ro),ln(ro);const oo={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},so=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),ao=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,lo=(e,t)=>{const n=e.nodeName.toLowerCase();return t.includes(n)?!so.has(n)||Boolean(ao.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(n)))},co={allowList:oo,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},uo={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},ho={entry:"(string|element|function|null)",selector:"(string|element)"};class fo extends Pn{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return co}static get DefaultType(){return uo}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,n]of Object.entries(this._config.content))this._setContent(e,n,t);const t=e.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&t.classList.add(...n.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,n]of Object.entries(e))super._typeCheckConfig({selector:t,entry:n},ho)}_setContent(e,t,n){const i=Mn.findOne(n,e);i&&((t=this._resolvePossibleFunction(t))?Gt(t)?this._putElementInTemplate(Jt(t),i):this._config.html?i.innerHTML=this._maybeSanitize(t):i.textContent=t:i.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),r=[].concat(...i.body.querySelectorAll("*"));for(const e of r){const n=e.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){e.remove();continue}const i=[].concat(...e.attributes),r=[].concat(t["*"]||[],t[n]||[]);for(const t of i)lo(t,r)||e.removeAttribute(t.nodeName)}return i.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return cn(e,[this])}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const po=new Set(["sanitize","allowList","sanitizeFn"]),mo="fade",go="show",_o=".modal",vo="hide.bs.modal",bo="hover",yo="focus",wo={AUTO:"auto",TOP:"top",RIGHT:an()?"left":"right",BOTTOM:"bottom",LEFT:an()?"right":"left"},Eo={allowList:oo,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Ao={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class To extends Dn{constructor(e,n){if(void 0===t)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,n),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return Eo}static get DefaultType(){return Ao}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),Sn.off(this._element.closest(_o),vo,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=Sn.trigger(this._element,this.constructor.eventName("show")),t=(tn(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),Sn.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(n),n.classList.add(go),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))Sn.on(e,"mouseover",nn);this._queueCallback((()=>{Sn.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(this._isShown()&&!Sn.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(go),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))Sn.off(e,"mouseover",nn);this._activeTrigger.click=!1,this._activeTrigger[yo]=!1,this._activeTrigger[bo]=!1,this._isHovered=null,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),Sn.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(mo,go),t.classList.add(`bs-${this.constructor.NAME}-auto`);const n=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",n),this._isAnimated()&&t.classList.add(mo),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new fo({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(mo)}_isShown(){return this.tip&&this.tip.classList.contains(go)}_createPopper(e){const t=cn(this._config.placement,[this,e,this._element]),n=wo[t.toUpperCase()];return Rt(this._element,e,this._getPopperConfig(n))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return cn(e,[this._element])}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,...cn(this._config.popperConfig,[t])}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)Sn.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===bo?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),n=t===bo?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");Sn.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?yo:bo]=!0,t._enter()})),Sn.on(this._element,n,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?yo:bo]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},Sn.on(this._element.closest(_o),vo,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=Ln.getDataAttributes(this._element);for(const e of Object.keys(t))po.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:Jt(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const[t,n]of Object.entries(this._config))this.constructor.Default[t]!==n&&(e[t]=n);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=To.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ln(To);const xo={...To.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},ko={...To.DefaultType,content:"(null|string|element|function)"};class So extends To{static get Default(){return xo}static get DefaultType(){return ko}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=So.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ln(So);const Oo=".bs.scrollspy",Co=`activate${Oo}`,Io=`click${Oo}`,Lo=`load${Oo}.data-api`,Po="active",Do="[href]",jo=".nav-link",Mo=`${jo}, .nav-item > ${jo}, .list-group-item`,$o={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},No={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Ho extends Dn{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return $o}static get DefaultType(){return No}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=Jt(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(Sn.off(this._config.target,Io),Sn.on(this._config.target,Io,Do,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const n=this._rootElement||window,i=t.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i,behavior:"smooth"});n.scrollTop=i}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),n=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},i=(this._rootElement||document.documentElement).scrollTop,r=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const o of e){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(o));continue}const e=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(r&&e){if(n(o),!i)return}else r||e||n(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=Mn.find(Do,this._config.target);for(const t of e){if(!t.hash||en(t))continue;const e=Mn.findOne(decodeURI(t.hash),this._element);Zt(e)&&(this._targetLinks.set(decodeURI(t.hash),t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(Po),this._activateParents(e),Sn.trigger(this._element,Co,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))Mn.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(Po);else for(const t of Mn.parents(e,".nav, .list-group"))for(const e of Mn.prev(t,Mo))e.classList.add(Po)}_clearActiveClass(e){e.classList.remove(Po);const t=Mn.find(`${Do}.${Po}`,e);for(const e of t)e.classList.remove(Po)}static jQueryInterface(e){return this.each((function(){const t=Ho.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Sn.on(window,Lo,(()=>{for(const e of Mn.find('[data-bs-spy="scroll"]'))Ho.getOrCreateInstance(e)})),ln(Ho);const Fo=".bs.tab",Bo=`hide${Fo}`,zo=`hidden${Fo}`,qo=`show${Fo}`,Wo=`shown${Fo}`,Ro=`click${Fo}`,Uo=`keydown${Fo}`,Vo=`load${Fo}`,Ko="ArrowLeft",Yo="ArrowRight",Qo="ArrowUp",Xo="ArrowDown",Go="Home",Jo="End",Zo="active",es="fade",ts="show",ns=":not(.dropdown-toggle)",is='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',rs=`.nav-link${ns}, .list-group-item${ns}, [role="tab"]${ns}, ${is}`,os=`.${Zo}[data-bs-toggle="tab"], .${Zo}[data-bs-toggle="pill"], .${Zo}[data-bs-toggle="list"]`;class ss extends Dn{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),Sn.on(this._element,Uo,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),n=t?Sn.trigger(t,Bo,{relatedTarget:e}):null;Sn.trigger(e,qo,{relatedTarget:t}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){e&&(e.classList.add(Zo),this._activate(Mn.getElementFromSelector(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),Sn.trigger(e,Wo,{relatedTarget:t})):e.classList.add(ts)}),e,e.classList.contains(es)))}_deactivate(e,t){e&&(e.classList.remove(Zo),e.blur(),this._deactivate(Mn.getElementFromSelector(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),Sn.trigger(e,zo,{relatedTarget:t})):e.classList.remove(ts)}),e,e.classList.contains(es)))}_keydown(e){if(![Ko,Yo,Qo,Xo,Go,Jo].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=this._getChildren().filter((e=>!en(e)));let n;if([Go,Jo].includes(e.key))n=t[e.key===Go?0:t.length-1];else{const i=[Yo,Xo].includes(e.key);n=hn(t,e.target,i,!0)}n&&(n.focus({preventScroll:!0}),ss.getOrCreateInstance(n).show())}_getChildren(){return Mn.find(rs,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=Mn.getElementFromSelector(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`${e.id}`))}_toggleDropDown(e,t){const n=this._getOuterElement(e);if(!n.classList.contains("dropdown"))return;const i=(e,i)=>{const r=Mn.findOne(e,n);r&&r.classList.toggle(i,t)};i(".dropdown-toggle",Zo),i(".dropdown-menu",ts),n.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}_elemIsActive(e){return e.classList.contains(Zo)}_getInnerElement(e){return e.matches(rs)?e:Mn.findOne(rs,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=ss.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Sn.on(document,Ro,is,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),en(this)||ss.getOrCreateInstance(this).show()})),Sn.on(window,Vo,(()=>{for(const e of Mn.find(os))ss.getOrCreateInstance(e)})),ln(ss);const as=".bs.toast",ls=`mouseover${as}`,cs=`mouseout${as}`,us=`focusin${as}`,hs=`focusout${as}`,ds=`hide${as}`,fs=`hidden${as}`,ps=`show${as}`,ms=`shown${as}`,gs="hide",_s="show",vs="showing",bs={animation:"boolean",autohide:"boolean",delay:"number"},ys={animation:!0,autohide:!0,delay:5e3};class ws extends Dn{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return ys}static get DefaultType(){return bs}static get NAME(){return"toast"}show(){Sn.trigger(this._element,ps).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(gs),rn(this._element),this._element.classList.add(_s,vs),this._queueCallback((()=>{this._element.classList.remove(vs),Sn.trigger(this._element,ms),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(Sn.trigger(this._element,ds).defaultPrevented||(this._element.classList.add(vs),this._queueCallback((()=>{this._element.classList.add(gs),this._element.classList.remove(vs,_s),Sn.trigger(this._element,fs)}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(_s),super.dispose()}isShown(){return this._element.classList.contains(_s)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){Sn.on(this._element,ls,(e=>this._onInteraction(e,!0))),Sn.on(this._element,cs,(e=>this._onInteraction(e,!1))),Sn.on(this._element,us,(e=>this._onInteraction(e,!0))),Sn.on(this._element,hs,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=ws.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}$n(ws),ln(ws);var Es=function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))},As=function(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};function Ts(e){return Z(fetch("http://localhost:3000/groceries/"+e).then((function(e){if(!e.ok)throw new Error("Food not found!");return e.json()})).catch((function(e){console.error(e)})))}var xs=document.getElementById("namirnicaInput"),ks=document.getElementById("dugmeObrisiNamirnicu"),Ss="";function Os(){document.getElementById("modal").style.display="none"}function Cs(){return Es(this,void 0,void 0,(function(){var e;return As(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,,4]),[4,fetch("../groceries-db.json")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent().groceries];case 3:return e=t.sent(),console.error("Error fetching groceries:",e),[2,[]];case 4:return[2]}}))}))}var Is=document.getElementById("dugmeVratiSveNamirnice");Is&&Is.addEventListener("click",(function(){!function(){Es(this,void 0,void 0,(function(){var e,t,n,i;return As(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,Cs()];case 1:return e=r.sent(),t=[],n=1,e.map((function(e){t.push("".concat(n.toString(),".").concat(e.id," ")),n++})),document.getElementById("sveNamirnice").innerHTML=t.join("<br>"),[3,3];case 2:return i=r.sent(),console.error("Error fetching and printing groceries:",i),[3,3];case 3:return[2]}}))}))}()})),xs&&xs.addEventListener("input",(function(){Ss=xs.value,console.log(Ss)})),ks&&ks.addEventListener("click",(function(){var e;console.log("pozivamo fju za brisanje namirnice"),e=Ss,console.log(e),localStorage.removeItem(e)})),document.getElementById("hideSectionRadio"),document.querySelector(".zaPrikaz"),window.toggleSection=function(e){document.querySelectorAll(".zaPrikaz").forEach((function(e){e.style.display="none"}));var t=document.getElementById(e);t instanceof HTMLElement&&(t.style.display="block")},function(){var e=document.querySelector(".labelUnos"),t=document.querySelector(".labelGrami"),n=document.querySelector(".prikazProteina"),i=document.querySelector(".prikazHidrata"),r=document.querySelector(".prikazMasti"),o=document.querySelector(".prikazKalorija");document.getElementById("nextPageButton").addEventListener("click",(function(){var t=e.value,n=encodeURIComponent(t);window.location.href="groceries-info.html?value=".concat(n)}));var s=0,a="";e?e.addEventListener("input",(function(){a=e.value,console.log(a)})):console.error('Element sa ID-om "labelUnos" nije pronađen.'),t?se(t,"input").pipe(pe(500),ee((function(e){return e.target.value.trim()})),me((function(e){var t=parseInt(e,10);return isNaN(t)?(console.error("Unesena količina nije validan broj."),s=0,n.innerHTML="0g",i.innerHTML="0g",r.innerHTML="0g",o.innerHTML="0g",function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Z(e,function(e){return(n=(t=e)[t.length-1])&&u(n.schedule)?e.pop():void 0;var t,n}(e))}(null)):(s=t,console.log(s),""!==e?Ts(a):void 0)}))).subscribe((function(e){if(e){var t=s/100*e.P,a=s/100*e.UH,l=s/100*e.M,c=s/100*e.Kcal;n.innerHTML=t.toFixed(2)+"g",i.innerHTML=a.toFixed(2)+"g",r.innerHTML=l.toFixed(2)+"g",o.innerHTML=c.toFixed(2)+"Kcal"}}),(function(e){console.error("Greška pri dobijanju podataka sa servera:",e)})):console.error('Element sa ID-om "labelKolicina" nije pronađen.'),document.querySelector(".labelP")&&console.log("Pronadjen je element"),se(e,"input").pipe(pe(500),ee((function(e){return e.target.value})),me((function(e){return Ts(e)}))).subscribe((function(e){e.P,e.UH,e.M,e.Kcal,console.log("Podaci:",e.P,e.UH,e.M,e.Kcal,s)}),(function(e){console.error("Greška pri dobijanju podataka sa servera:",e)}));var l=document.getElementById("dugmeDodaj");l?l.addEventListener("click",(function(){var e,t={id:a,name:a,P:parseFloat(n.innerHTML),UH:parseFloat(i.innerHTML),M:parseFloat(r.innerHTML),Kcal:parseFloat(o.innerHTML),Opis:""};console.log("Upisano je! "+t.id+t.P+t.UH),e=t,console.log("Pozvana je fja upisiUlocalstorage i vrenodsti obj su \n        ".concat(e.P,", ").concat(e.id)),localStorage.setItem(e.id,JSON.stringify(e)),document.getElementById("modal").style.display="block",setTimeout(Os,3e3)})):console.error('Element sa ID-om "dugmeDodaj" nije pronađen.');var c=document.getElementById("dugmeProcitaj");c&&c.addEventListener("click",(function(){!function(){for(var e=0;e<localStorage.length;e++){var t=localStorage.key(e);console.log(t);var n=localStorage.getItem(t);console.log(n)}}()}));var h=document.getElementById("obrisiKonzolu");h&&h.addEventListener("click",(function(){console.clear();var e=document.getElementById("obrisanaPoruka");e&&(e.style.display="block",setTimeout((function(){e.style.display="none"}),3e3))}));var d=document.getElementById("dugmeObrisiSveIzSveske");d&&d.addEventListener("click",(function(){localStorage.clear()}))}();var Ls,Ps,Ds,js,Ms,$s,Ns,Hs,Fs,Bs=0,zs=0,qs=document.getElementById("calculate");function Ws(e){switch($s){case"Sedentary":Hs=Math.round(1.2*e);break;case"Lightly Active":Hs=Math.round(1.375*e);break;case"Moderately Active":Hs=Math.round(1.55*e);break;case"Very Active":Hs=Math.round(1.725*e);break;case"Extremely Active":Hs=Math.round(1.9*e)}}function Rs(e,t){console.log("Usao sam u fju!");var n=document.getElementById("results");n&&(n.style.display="block");var i=document.querySelector(".bmr"),r=document.querySelector(".tdee"),o=(document.querySelector(".maintain"),document.querySelector(".lose-1lb"),document.querySelector(".lose-oneandhalflb"),document.querySelector(".lose-2lb"),document.getElementById("loading"));o&&(o.style.display="none"),i&&void 0!==e&&(i.innerHTML+="  BMR:  ".concat(e)),r&&void 0!==t&&(r.innerHTML+="  TDEE: ".concat(t))}function Us(){var e=document.querySelector(".alert");e&&e.remove()}qs&&qs.addEventListener("click",(function(){console.log("Pozivam calculate  bmr"),Ls=parseInt(document.getElementById("age").value),Ps=document.getElementById("weight").value,Ds=parseInt(document.getElementById("height-feet").value),js=parseInt(document.getElementById("height-inch").value),Ms=document.getElementById("gender").value,$s=document.getElementById("activity").value,Fs=document.getElementById("breast-feeding").value,function(e,t,n){void 0!==e&&(Bs=parseFloat((parseFloat(e)/2.2).toFixed(2))),void 0!==t&&void 0!==n&&(zs=2.54*(12*t+n))}(Ps,Ds,js),isNaN(Ls)||void 0===Ps?function(e){var t=document.getElementById("results");t&&(t.style.display="none");var n=document.getElementById("loading");n&&(n.style.display="none");var i=document.createElement("div"),r=document.querySelector(".myForm"),o=document.querySelector(".field");i.className="alert alert-danger",i.appendChild(document.createTextNode("Please fill out all fields before submitting")),r&&o&&r.insertBefore(i,o),setTimeout(Us,5e3)}():(document.querySelector(".submit"),"Female"===Ms?(Ns=655+9.6*Bs+1.8*zs-4.7*Ls,Ns=Math.round(Ns),Ws("Yes"===Fs?Ns+=450:Ns),Rs(Ns,Hs)):(console.log(Ms,Ls,Ps,Bs,zs),Ns=66+13.7*Bs+5*zs-6.8*Ls,Ws(Ns=Math.round(Ns)),Rs(Ns,Hs)))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,