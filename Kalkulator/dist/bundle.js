/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{afterMain:()=>He,afterRead:()=>Ne,afterWrite:()=>qe,applyStyles:()=>Qe,arrow:()=>mt,auto:()=>Te,basePlacements:()=>ke,beforeMain:()=>$e,beforeRead:()=>De,beforeWrite:()=>Fe,bottom:()=>we,clippingParents:()=>Oe,computeStyles:()=>bt,createPopper:()=>Yt,createPopperBase:()=>Kt,createPopperLite:()=>Qt,detectOverflow:()=>Dt,end:()=>Ce,eventListeners:()=>wt,flip:()=>Mt,hide:()=>Bt,left:()=>Ae,main:()=>Be,modifierPhases:()=>We,offset:()=>Ht,placements:()=>Pe,popper:()=>Ie,popperGenerator:()=>Vt,popperOffsets:()=>Ft,preventOverflow:()=>zt,read:()=>Me,reference:()=>Le,right:()=>Ee,start:()=>xe,top:()=>ye,variationPlacements:()=>je,viewport:()=>Se,write:()=>ze});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},n(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}function r(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function o(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function s(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,r,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return s}function a(e,t,n){if(n||2===arguments.length)for(var i,r=0,o=t.length;r<o;r++)!i&&r in t||(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}function c(e){return this instanceof c?(this.v=e,this):new c(e)}function l(e){return"function"==typeof e}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var u,d=((u=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),u.prototype.constructor=u,u);function h(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var f=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,i,r;if(!this.closed){this.closed=!0;var c=this._parentage;if(c)if(this._parentage=null,Array.isArray(c))try{for(var u=o(c),h=u.next();!h.done;h=u.next())h.value.remove(this)}catch(t){e={error:t}}finally{try{h&&!h.done&&(t=u.return)&&t.call(u)}finally{if(e)throw e.error}}else c.remove(this);var f=this.initialTeardown;if(l(f))try{f()}catch(e){r=e instanceof d?e.errors:[e]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var g=o(p),_=g.next();!_.done;_=g.next()){var v=_.value;try{m(v)}catch(e){r=null!=r?r:[],e instanceof d?r=a(a([],s(r)),s(e.errors)):r.push(e)}}}catch(e){n={error:e}}finally{try{_&&!_.done&&(i=g.return)&&i.call(g)}finally{if(n)throw n.error}}}if(r)throw new d(r)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)m(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&h(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&h(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function p(e){return e instanceof f||e&&"closed"in e&&l(e.remove)&&l(e.add)&&l(e.unsubscribe)}function m(e){l(e)?e():e.unsubscribe()}f.EMPTY;var g=function(e){function t(t,n){return e.call(this)||this}return i(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(f),_={setInterval:function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var r=_.delegate;return(null==r?void 0:r.setInterval)?r.setInterval.apply(r,a([e,t],s(n))):setInterval.apply(void 0,a([e,t],s(n)))},clearInterval:function(e){var t=_.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},v=function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.scheduler=t,i.work=n,i.pending=!1,i}return i(t,e),t.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var i=this.id,r=this.scheduler;return null!=i&&(this.id=this.recycleAsyncId(r,i,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),_.setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&_.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n,i=!1;try{this.work(e)}catch(e){i=!0,n=e||new Error("Scheduled action threw falsy error")}if(i)return this.unsubscribe(),n},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,i=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(i,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(g),b={now:function(){return(b.delegate||Date).now()},delegate:void 0},y=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=b.now,e}(),w=new(function(e){function t(t,n){void 0===n&&(n=y.now);var i=e.call(this,t,n)||this;return i.actions=[],i._active=!1,i}return i(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(y))(v),E=w,A={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},T={setTimeout:function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var r=T.delegate;return(null==r?void 0:r.setTimeout)?r.setTimeout.apply(r,a([e,t],s(n))):setTimeout.apply(void 0,a([e,t],s(n)))},clearTimeout:function(e){var t=T.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function k(e){T.setTimeout((function(){var t=A.onUnhandledError;if(!t)throw e;t(e)}))}function x(){}var C=O("C",void 0,void 0);function O(e,t,n){return{kind:e,value:t,error:n}}var S=null,I=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,p(t)&&t.add(n)):n.destination=$,n}return i(t,e),t.create=function(e,t,n){return new D(e,t,n)},t.prototype.next=function(e){this.isStopped?N(function(e){return O("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?N(O("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?N(C,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(f),L=Function.prototype.bind;function j(e,t){return L.call(e,t)}var P=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){M(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){M(e)}else M(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){M(e)}},e}(),D=function(e){function t(t,n,i){var r,o,s=e.call(this)||this;return l(t)||!t?r={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=i?i:void 0}:s&&A.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},r={next:t.next&&j(t.next,o),error:t.error&&j(t.error,o),complete:t.complete&&j(t.complete,o)}):r=t,s.destination=new P(r),s}return i(t,e),t}(I);function M(e){var t;A.useDeprecatedSynchronousErrorHandling?(t=e,A.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=t)):k(e)}function N(e,t){var n=A.onStoppedNotification;n&&T.setTimeout((function(){return n(e,t)}))}var $={closed:!0,next:x,error:function(e){throw e},complete:x},B="function"==typeof Symbol&&Symbol.observable||"@@observable";function H(e){return e}var F=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var i,r=this,o=(i=e)&&i instanceof I||function(e){return e&&l(e.next)&&l(e.error)&&l(e.complete)}(i)&&p(i)?e:new D(e,t,n);return function(e){if(A.useDeprecatedSynchronousErrorHandling){var t=!S;if(t&&(S={errorThrown:!1,error:null}),e(),t){var n=S,i=n.errorThrown,r=n.error;if(S=null,i)throw r}}else e()}((function(){var e=r,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?r._subscribe(o):r._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=z(t))((function(t,i){var r=new D({next:function(t){try{e(t)}catch(e){i(e),r.unsubscribe()}},error:i,complete:t});n.subscribe(r)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[B]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?H:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=z(e))((function(e,n){var i;t.subscribe((function(e){return i=e}),(function(e){return n(e)}),(function(){return e(i)}))}))},e.create=function(t){return new e(t)},e}();function z(e){var t;return null!==(t=null!=e?e:A.Promise)&&void 0!==t?t:Promise}function q(e){return e&&l(e.schedule)}function W(e,t){return void 0===e&&(e=0),void 0===t&&(t=w),e<0&&(e=0),function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=E);var i=-1;return null!=t&&(q(t)?n=t:i=t),new F((function(t){var r,o=(r=e)instanceof Date&&!isNaN(r)?+e-n.now():e;o<0&&(o=0);var s=0;return n.schedule((function(){t.closed||(t.next(s++),0<=i?this.schedule(void 0,i):t.complete())}),o)}))}(e,e,t)}function R(e){return function(t){if(function(e){return l(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function U(e,t,n,i,r){return new V(e,t,n,i,r)}var V=function(e){function t(t,n,i,r,o,s){var a=e.call(this,t)||this;return a.onFinalize=o,a.shouldUnsubscribe=s,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=r?function(e){try{r(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=i?function(){try{i()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return i(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(I);function K(e,t){return R((function(n,i){var r=0;n.subscribe(U(i,(function(n){i.next(e.call(t,n,r++))})))}))}var Y=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function Q(e){return l(null==e?void 0:e.then)}function X(e){return l(e[B])}function G(e){return Symbol.asyncIterator&&l(null==e?void 0:e[Symbol.asyncIterator])}function Z(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var J="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function ee(e){return l(null==e?void 0:e[J])}function te(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,r=n.apply(e,t||[]),o=[];return i={},s("next"),s("throw"),s("return"),i[Symbol.asyncIterator]=function(){return this},i;function s(e){r[e]&&(i[e]=function(t){return new Promise((function(n,i){o.push([e,t,n,i])>1||a(e,t)}))})}function a(e,t){try{(n=r[e](t)).value instanceof c?Promise.resolve(n.value.v).then(l,u):d(o[0][2],n)}catch(e){d(o[0][3],e)}var n}function l(e){a("next",e)}function u(e){a("throw",e)}function d(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var t,n,i;return r(this,(function(r){switch(r.label){case 0:t=e.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,c(t.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,c(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,c(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function ne(e){return l(null==e?void 0:e.getReader)}function ie(e){if(e instanceof F)return e;if(null!=e){if(X(e))return r=e,new F((function(e){var t=r[B]();if(l(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(Y(e))return i=e,new F((function(e){for(var t=0;t<i.length&&!e.closed;t++)e.next(i[t]);e.complete()}));if(Q(e))return n=e,new F((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,k)}));if(G(e))return re(e);if(ee(e))return t=e,new F((function(e){var n,i;try{for(var r=o(t),s=r.next();!s.done;s=r.next()){var a=s.value;if(e.next(a),e.closed)return}}catch(e){n={error:e}}finally{try{s&&!s.done&&(i=r.return)&&i.call(r)}finally{if(n)throw n.error}}e.complete()}));if(ne(e))return re(te(e))}var t,n,i,r;throw Z(e)}function re(e){return new F((function(t){(function(e,t){var n,i,s,a,c,l,u,d;return c=this,l=void 0,d=function(){var c,l;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),n=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=o(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(n){t[n]=e[n]&&function(t){return new Promise((function(i,r){!function(e,t,n,i){Promise.resolve(i).then((function(t){e({value:t,done:n})}),t)}(i,r,(t=e[n](t)).done,t.value)}))}}}(e),r.label=1;case 1:return[4,n.next()];case 2:if((i=r.sent()).done)return[3,4];if(c=i.value,t.next(c),t.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=r.sent(),s={error:l},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(a=n.return)?[4,a.call(n)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((u=void 0)||(u=Promise))((function(e,t){function n(e){try{r(d.next(e))}catch(e){t(e)}}function i(e){try{r(d.throw(e))}catch(e){t(e)}}function r(t){var r;t.done?e(t.value):(r=t.value,r instanceof u?r:new u((function(e){e(r)}))).then(n,i)}r((d=d.apply(c,l||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function oe(e,t,n,i,r){void 0===i&&(i=0),void 0===r&&(r=!1);var o=t.schedule((function(){n(),r?e.add(this.schedule(null,i)):this.unsubscribe()}),i);if(e.add(o),!r)return o}function se(e,t){return void 0===t&&(t=0),R((function(n,i){n.subscribe(U(i,(function(n){return oe(i,e,(function(){return i.next(n)}),t)}),(function(){return oe(i,e,(function(){return i.complete()}),t)}),(function(n){return oe(i,e,(function(){return i.error(n)}),t)})))}))}function ae(e,t){return void 0===t&&(t=0),R((function(n,i){i.add(e.schedule((function(){return n.subscribe(i)}),t))}))}function ce(e,t){if(!e)throw new Error("Iterable cannot be null");return new F((function(n){oe(n,t,(function(){var i=e[Symbol.asyncIterator]();oe(n,t,(function(){i.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function le(e,t){return t?function(e,t){if(null!=e){if(X(e))return function(e,t){return ie(e).pipe(ae(t),se(t))}(e,t);if(Y(e))return function(e,t){return new F((function(n){var i=0;return t.schedule((function(){i===e.length?n.complete():(n.next(e[i++]),n.closed||this.schedule())}))}))}(e,t);if(Q(e))return function(e,t){return ie(e).pipe(ae(t),se(t))}(e,t);if(G(e))return ce(e,t);if(ee(e))return function(e,t){return new F((function(n){var i;return oe(n,t,(function(){i=e[J](),oe(n,t,(function(){var e,t,r;try{t=(e=i.next()).value,r=e.done}catch(e){return void n.error(e)}r?n.complete():n.next(t)}),0,!0)})),function(){return l(null==i?void 0:i.return)&&i.return()}}))}(e,t);if(ne(e))return function(e,t){return ce(te(e),t)}(e,t)}throw Z(e)}(e,t):ie(e)}function ue(e,t,n){return void 0===n&&(n=1/0),l(t)?ue((function(n,i){return K((function(e,r){return t(n,e,i,r)}))(ie(e(n,i)))}),n):("number"==typeof t&&(n=t),R((function(t,i){return function(e,t,n,i,r,o,s,a){var c=[],l=0,u=0,d=!1,h=function(){!d||c.length||l||t.complete()},f=function(e){return l<i?p(e):c.push(e)},p=function(e){l++;var r=!1;ie(n(e,u++)).subscribe(U(t,(function(e){t.next(e)}),(function(){r=!0}),void 0,(function(){if(r)try{l--;for(;c.length&&l<i;)e=void 0,e=c.shift(),p(e);h()}catch(e){t.error(e)}var e})))};return e.subscribe(U(t,f,(function(){d=!0,h()}))),function(){}}(t,i,e,n)})))}var de=Array.isArray;var he=["addListener","removeListener"],fe=["addEventListener","removeEventListener"],pe=["on","off"];function me(e,t,n,i){if(l(n)&&(i=n,n=void 0),i)return me(e,t,n).pipe((r=i,K((function(e){return function(e,t){return de(t)?e.apply(void 0,a([],s(t))):e(t)}(r,e)}))));var r,o=s(function(e){return l(e.addEventListener)&&l(e.removeEventListener)}(e)?fe.map((function(i){return function(r){return e[i](t,r,n)}})):function(e){return l(e.addListener)&&l(e.removeListener)}(e)?he.map(ge(e,t)):function(e){return l(e.on)&&l(e.off)}(e)?pe.map(ge(e,t)):[],2),c=o[0],u=o[1];if(!c&&Y(e))return ue((function(e){return me(e,t,n)}))(ie(e));if(!c)throw new TypeError("Invalid event target");return new F((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return c(t),function(){return u(t)}}))}function ge(e,t){return function(n){return function(i){return e[n](t,i)}}}function _e(e,t){return void 0===t&&(t=w),R((function(n,i){var r=null,o=null,s=null,a=function(){if(r){r.unsubscribe(),r=null;var e=o;o=null,i.next(e)}};function c(){var n=s+e,o=t.now();if(o<n)return r=this.schedule(void 0,n-o),void i.add(r);a()}n.subscribe(U(i,(function(n){o=n,s=t.now(),r||(r=t.schedule(c,e),i.add(r))}),(function(){a(),i.complete()}),void 0,(function(){o=r=null})))}))}function ve(e,t){return R((function(n,i){var r=null,o=0,s=!1,a=function(){return s&&!r&&i.complete()};n.subscribe(U(i,(function(n){null==r||r.unsubscribe();var s=0,c=o++;ie(e(n,c)).subscribe(r=U(i,(function(e){return i.next(t?t(n,e,c,s++):e)}),(function(){r=null,a()})))}),(function(){s=!0,a()})))}))}function be(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return q((t=e)[t.length-1])?e.pop():void 0;var t}(e);return le(e,n)}var ye="top",we="bottom",Ee="right",Ae="left",Te="auto",ke=[ye,we,Ee,Ae],xe="start",Ce="end",Oe="clippingParents",Se="viewport",Ie="popper",Le="reference",je=ke.reduce((function(e,t){return e.concat([t+"-"+xe,t+"-"+Ce])}),[]),Pe=[].concat(ke,[Te]).reduce((function(e,t){return e.concat([t,t+"-"+xe,t+"-"+Ce])}),[]),De="beforeRead",Me="read",Ne="afterRead",$e="beforeMain",Be="main",He="afterMain",Fe="beforeWrite",ze="write",qe="afterWrite",We=[De,Me,Ne,$e,Be,He,Fe,ze,qe];function Re(e){return e?(e.nodeName||"").toLowerCase():null}function Ue(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function Ve(e){return e instanceof Ue(e).Element||e instanceof Element}function Ke(e){return e instanceof Ue(e).HTMLElement||e instanceof HTMLElement}function Ye(e){return"undefined"!=typeof ShadowRoot&&(e instanceof Ue(e).ShadowRoot||e instanceof ShadowRoot)}const Qe={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},r=t.elements[e];Ke(r)&&Re(r)&&(Object.assign(r.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],r=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});Ke(i)&&Re(i)&&(Object.assign(i.style,o),Object.keys(r).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]};function Xe(e){return e.split("-")[0]}var Ge=Math.max,Ze=Math.min,Je=Math.round;function et(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function tt(){return!/^((?!chrome|android).)*safari/i.test(et())}function nt(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var i=e.getBoundingClientRect(),r=1,o=1;t&&Ke(e)&&(r=e.offsetWidth>0&&Je(i.width)/e.offsetWidth||1,o=e.offsetHeight>0&&Je(i.height)/e.offsetHeight||1);var s=(Ve(e)?Ue(e):window).visualViewport,a=!tt()&&n,c=(i.left+(a&&s?s.offsetLeft:0))/r,l=(i.top+(a&&s?s.offsetTop:0))/o,u=i.width/r,d=i.height/o;return{width:u,height:d,top:l,right:c+u,bottom:l+d,left:c,x:c,y:l}}function it(e){var t=nt(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function rt(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&Ye(n)){var i=t;do{if(i&&e.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function ot(e){return Ue(e).getComputedStyle(e)}function st(e){return["table","td","th"].indexOf(Re(e))>=0}function at(e){return((Ve(e)?e.ownerDocument:e.document)||window.document).documentElement}function ct(e){return"html"===Re(e)?e:e.assignedSlot||e.parentNode||(Ye(e)?e.host:null)||at(e)}function lt(e){return Ke(e)&&"fixed"!==ot(e).position?e.offsetParent:null}function ut(e){for(var t=Ue(e),n=lt(e);n&&st(n)&&"static"===ot(n).position;)n=lt(n);return n&&("html"===Re(n)||"body"===Re(n)&&"static"===ot(n).position)?t:n||function(e){var t=/firefox/i.test(et());if(/Trident/i.test(et())&&Ke(e)&&"fixed"===ot(e).position)return null;var n=ct(e);for(Ye(n)&&(n=n.host);Ke(n)&&["html","body"].indexOf(Re(n))<0;){var i=ot(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}function dt(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function ht(e,t,n){return Ge(e,Ze(t,n))}function ft(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function pt(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}const mt={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,r=e.options,o=n.elements.arrow,s=n.modifiersData.popperOffsets,a=Xe(n.placement),c=dt(a),l=[Ae,Ee].indexOf(a)>=0?"height":"width";if(o&&s){var u=function(e,t){return ft("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:pt(e,ke))}(r.padding,n),d=it(o),h="y"===c?ye:Ae,f="y"===c?we:Ee,p=n.rects.reference[l]+n.rects.reference[c]-s[c]-n.rects.popper[l],m=s[c]-n.rects.reference[c],g=ut(o),_=g?"y"===c?g.clientHeight||0:g.clientWidth||0:0,v=p/2-m/2,b=u[h],y=_-d[l]-u[f],w=_/2-d[l]/2+v,E=ht(b,w,y),A=c;n.modifiersData[i]=((t={})[A]=E,t.centerOffset=E-w,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&rt(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function gt(e){return e.split("-")[1]}var _t={top:"auto",right:"auto",bottom:"auto",left:"auto"};function vt(e){var t,n=e.popper,i=e.popperRect,r=e.placement,o=e.variation,s=e.offsets,a=e.position,c=e.gpuAcceleration,l=e.adaptive,u=e.roundOffsets,d=e.isFixed,h=s.x,f=void 0===h?0:h,p=s.y,m=void 0===p?0:p,g="function"==typeof u?u({x:f,y:m}):{x:f,y:m};f=g.x,m=g.y;var _=s.hasOwnProperty("x"),v=s.hasOwnProperty("y"),b=Ae,y=ye,w=window;if(l){var E=ut(n),A="clientHeight",T="clientWidth";E===Ue(n)&&"static"!==ot(E=at(n)).position&&"absolute"===a&&(A="scrollHeight",T="scrollWidth"),(r===ye||(r===Ae||r===Ee)&&o===Ce)&&(y=we,m-=(d&&E===w&&w.visualViewport?w.visualViewport.height:E[A])-i.height,m*=c?1:-1),r!==Ae&&(r!==ye&&r!==we||o!==Ce)||(b=Ee,f-=(d&&E===w&&w.visualViewport?w.visualViewport.width:E[T])-i.width,f*=c?1:-1)}var k,x=Object.assign({position:a},l&&_t),C=!0===u?function(e,t){var n=e.x,i=e.y,r=t.devicePixelRatio||1;return{x:Je(n*r)/r||0,y:Je(i*r)/r||0}}({x:f,y:m},Ue(n)):{x:f,y:m};return f=C.x,m=C.y,c?Object.assign({},x,((k={})[y]=v?"0":"",k[b]=_?"0":"",k.transform=(w.devicePixelRatio||1)<=1?"translate("+f+"px, "+m+"px)":"translate3d("+f+"px, "+m+"px, 0)",k)):Object.assign({},x,((t={})[y]=v?m+"px":"",t[b]=_?f+"px":"",t.transform="",t))}const bt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,r=void 0===i||i,o=n.adaptive,s=void 0===o||o,a=n.roundOffsets,c=void 0===a||a,l={placement:Xe(t.placement),variation:gt(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,vt(Object.assign({},l,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:c})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,vt(Object.assign({},l,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var yt={passive:!0};const wt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,r=i.scroll,o=void 0===r||r,s=i.resize,a=void 0===s||s,c=Ue(t.elements.popper),l=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&l.forEach((function(e){e.addEventListener("scroll",n.update,yt)})),a&&c.addEventListener("resize",n.update,yt),function(){o&&l.forEach((function(e){e.removeEventListener("scroll",n.update,yt)})),a&&c.removeEventListener("resize",n.update,yt)}},data:{}};var Et={left:"right",right:"left",bottom:"top",top:"bottom"};function At(e){return e.replace(/left|right|bottom|top/g,(function(e){return Et[e]}))}var Tt={start:"end",end:"start"};function kt(e){return e.replace(/start|end/g,(function(e){return Tt[e]}))}function xt(e){var t=Ue(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function Ct(e){return nt(at(e)).left+xt(e).scrollLeft}function Ot(e){var t=ot(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+i)}function St(e){return["html","body","#document"].indexOf(Re(e))>=0?e.ownerDocument.body:Ke(e)&&Ot(e)?e:St(ct(e))}function It(e,t){var n;void 0===t&&(t=[]);var i=St(e),r=i===(null==(n=e.ownerDocument)?void 0:n.body),o=Ue(i),s=r?[o].concat(o.visualViewport||[],Ot(i)?i:[]):i,a=t.concat(s);return r?a:a.concat(It(ct(s)))}function Lt(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function jt(e,t,n){return t===Se?Lt(function(e,t){var n=Ue(e),i=at(e),r=n.visualViewport,o=i.clientWidth,s=i.clientHeight,a=0,c=0;if(r){o=r.width,s=r.height;var l=tt();(l||!l&&"fixed"===t)&&(a=r.offsetLeft,c=r.offsetTop)}return{width:o,height:s,x:a+Ct(e),y:c}}(e,n)):Ve(t)?function(e,t){var n=nt(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):Lt(function(e){var t,n=at(e),i=xt(e),r=null==(t=e.ownerDocument)?void 0:t.body,o=Ge(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),s=Ge(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),a=-i.scrollLeft+Ct(e),c=-i.scrollTop;return"rtl"===ot(r||n).direction&&(a+=Ge(n.clientWidth,r?r.clientWidth:0)-o),{width:o,height:s,x:a,y:c}}(at(e)))}function Pt(e){var t,n=e.reference,i=e.element,r=e.placement,o=r?Xe(r):null,s=r?gt(r):null,a=n.x+n.width/2-i.width/2,c=n.y+n.height/2-i.height/2;switch(o){case ye:t={x:a,y:n.y-i.height};break;case we:t={x:a,y:n.y+n.height};break;case Ee:t={x:n.x+n.width,y:c};break;case Ae:t={x:n.x-i.width,y:c};break;default:t={x:n.x,y:n.y}}var l=o?dt(o):null;if(null!=l){var u="y"===l?"height":"width";switch(s){case xe:t[l]=t[l]-(n[u]/2-i[u]/2);break;case Ce:t[l]=t[l]+(n[u]/2-i[u]/2)}}return t}function Dt(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=void 0===i?e.placement:i,o=n.strategy,s=void 0===o?e.strategy:o,a=n.boundary,c=void 0===a?Oe:a,l=n.rootBoundary,u=void 0===l?Se:l,d=n.elementContext,h=void 0===d?Ie:d,f=n.altBoundary,p=void 0!==f&&f,m=n.padding,g=void 0===m?0:m,_=ft("number"!=typeof g?g:pt(g,ke)),v=h===Ie?Le:Ie,b=e.rects.popper,y=e.elements[p?v:h],w=function(e,t,n,i){var r="clippingParents"===t?function(e){var t=It(ct(e)),n=["absolute","fixed"].indexOf(ot(e).position)>=0&&Ke(e)?ut(e):e;return Ve(n)?t.filter((function(e){return Ve(e)&&rt(e,n)&&"body"!==Re(e)})):[]}(e):[].concat(t),o=[].concat(r,[n]),s=o[0],a=o.reduce((function(t,n){var r=jt(e,n,i);return t.top=Ge(r.top,t.top),t.right=Ze(r.right,t.right),t.bottom=Ze(r.bottom,t.bottom),t.left=Ge(r.left,t.left),t}),jt(e,s,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(Ve(y)?y:y.contextElement||at(e.elements.popper),c,u,s),E=nt(e.elements.reference),A=Pt({reference:E,element:b,strategy:"absolute",placement:r}),T=Lt(Object.assign({},b,A)),k=h===Ie?T:E,x={top:w.top-k.top+_.top,bottom:k.bottom-w.bottom+_.bottom,left:w.left-k.left+_.left,right:k.right-w.right+_.right},C=e.modifiersData.offset;if(h===Ie&&C){var O=C[r];Object.keys(x).forEach((function(e){var t=[Ee,we].indexOf(e)>=0?1:-1,n=[ye,we].indexOf(e)>=0?"y":"x";x[e]+=O[n]*t}))}return x}const Mt={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name;if(!t.modifiersData[i]._skip){for(var r=n.mainAxis,o=void 0===r||r,s=n.altAxis,a=void 0===s||s,c=n.fallbackPlacements,l=n.padding,u=n.boundary,d=n.rootBoundary,h=n.altBoundary,f=n.flipVariations,p=void 0===f||f,m=n.allowedAutoPlacements,g=t.options.placement,_=Xe(g),v=c||(_!==g&&p?function(e){if(Xe(e)===Te)return[];var t=At(e);return[kt(e),t,kt(t)]}(g):[At(g)]),b=[g].concat(v).reduce((function(e,n){return e.concat(Xe(n)===Te?function(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=n.boundary,o=n.rootBoundary,s=n.padding,a=n.flipVariations,c=n.allowedAutoPlacements,l=void 0===c?Pe:c,u=gt(i),d=u?a?je:je.filter((function(e){return gt(e)===u})):ke,h=d.filter((function(e){return l.indexOf(e)>=0}));0===h.length&&(h=d);var f=h.reduce((function(t,n){return t[n]=Dt(e,{placement:n,boundary:r,rootBoundary:o,padding:s})[Xe(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:n,boundary:u,rootBoundary:d,padding:l,flipVariations:p,allowedAutoPlacements:m}):n)}),[]),y=t.rects.reference,w=t.rects.popper,E=new Map,A=!0,T=b[0],k=0;k<b.length;k++){var x=b[k],C=Xe(x),O=gt(x)===xe,S=[ye,we].indexOf(C)>=0,I=S?"width":"height",L=Dt(t,{placement:x,boundary:u,rootBoundary:d,altBoundary:h,padding:l}),j=S?O?Ee:Ae:O?we:ye;y[I]>w[I]&&(j=At(j));var P=At(j),D=[];if(o&&D.push(L[C]<=0),a&&D.push(L[j]<=0,L[P]<=0),D.every((function(e){return e}))){T=x,A=!1;break}E.set(x,D)}if(A)for(var M=function(e){var t=b.find((function(t){var n=E.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return T=t,"break"},N=p?3:1;N>0&&"break"!==M(N);N--);t.placement!==T&&(t.modifiersData[i]._skip=!0,t.placement=T,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function Nt(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function $t(e){return[ye,Ee,we,Ae].some((function(t){return e[t]>=0}))}const Bt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,r=t.rects.popper,o=t.modifiersData.preventOverflow,s=Dt(t,{elementContext:"reference"}),a=Dt(t,{altBoundary:!0}),c=Nt(s,i),l=Nt(a,r,o),u=$t(c),d=$t(l);t.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:l,isReferenceHidden:u,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":d})}},Ht={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.offset,o=void 0===r?[0,0]:r,s=Pe.reduce((function(e,n){return e[n]=function(e,t,n){var i=Xe(e),r=[Ae,ye].indexOf(i)>=0?-1:1,o="function"==typeof n?n(Object.assign({},t,{placement:e})):n,s=o[0],a=o[1];return s=s||0,a=(a||0)*r,[Ae,Ee].indexOf(i)>=0?{x:a,y:s}:{x:s,y:a}}(n,t.rects,o),e}),{}),a=s[t.placement],c=a.x,l=a.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=c,t.modifiersData.popperOffsets.y+=l),t.modifiersData[i]=s}},Ft={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=Pt({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},zt={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.mainAxis,o=void 0===r||r,s=n.altAxis,a=void 0!==s&&s,c=n.boundary,l=n.rootBoundary,u=n.altBoundary,d=n.padding,h=n.tether,f=void 0===h||h,p=n.tetherOffset,m=void 0===p?0:p,g=Dt(t,{boundary:c,rootBoundary:l,padding:d,altBoundary:u}),_=Xe(t.placement),v=gt(t.placement),b=!v,y=dt(_),w="x"===y?"y":"x",E=t.modifiersData.popperOffsets,A=t.rects.reference,T=t.rects.popper,k="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,x="number"==typeof k?{mainAxis:k,altAxis:k}:Object.assign({mainAxis:0,altAxis:0},k),C=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,O={x:0,y:0};if(E){if(o){var S,I="y"===y?ye:Ae,L="y"===y?we:Ee,j="y"===y?"height":"width",P=E[y],D=P+g[I],M=P-g[L],N=f?-T[j]/2:0,$=v===xe?A[j]:T[j],B=v===xe?-T[j]:-A[j],H=t.elements.arrow,F=f&&H?it(H):{width:0,height:0},z=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},q=z[I],W=z[L],R=ht(0,A[j],F[j]),U=b?A[j]/2-N-R-q-x.mainAxis:$-R-q-x.mainAxis,V=b?-A[j]/2+N+R+W+x.mainAxis:B+R+W+x.mainAxis,K=t.elements.arrow&&ut(t.elements.arrow),Y=K?"y"===y?K.clientTop||0:K.clientLeft||0:0,Q=null!=(S=null==C?void 0:C[y])?S:0,X=P+V-Q,G=ht(f?Ze(D,P+U-Q-Y):D,P,f?Ge(M,X):M);E[y]=G,O[y]=G-P}if(a){var Z,J="x"===y?ye:Ae,ee="x"===y?we:Ee,te=E[w],ne="y"===w?"height":"width",ie=te+g[J],re=te-g[ee],oe=-1!==[ye,Ae].indexOf(_),se=null!=(Z=null==C?void 0:C[w])?Z:0,ae=oe?ie:te-A[ne]-T[ne]-se+x.altAxis,ce=oe?te+A[ne]+T[ne]-se-x.altAxis:re,le=f&&oe?function(e,t,n){var i=ht(e,t,n);return i>n?n:i}(ae,te,ce):ht(f?ae:ie,te,f?ce:re);E[w]=le,O[w]=le-te}t.modifiersData[i]=O}},requiresIfExists:["offset"]};function qt(e,t,n){void 0===n&&(n=!1);var i,r,o=Ke(t),s=Ke(t)&&function(e){var t=e.getBoundingClientRect(),n=Je(t.width)/e.offsetWidth||1,i=Je(t.height)/e.offsetHeight||1;return 1!==n||1!==i}(t),a=at(t),c=nt(e,s,n),l={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(o||!o&&!n)&&(("body"!==Re(t)||Ot(a))&&(l=(i=t)!==Ue(i)&&Ke(i)?{scrollLeft:(r=i).scrollLeft,scrollTop:r.scrollTop}:xt(i)),Ke(t)?((u=nt(t,!0)).x+=t.clientLeft,u.y+=t.clientTop):a&&(u.x=Ct(a))),{x:c.left+l.scrollLeft-u.x,y:c.top+l.scrollTop-u.y,width:c.width,height:c.height}}function Wt(e){var t=new Map,n=new Set,i=[];function r(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&r(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||r(e)})),i}var Rt={placement:"bottom",modifiers:[],strategy:"absolute"};function Ut(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Vt(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,i=void 0===n?[]:n,r=t.defaultOptions,o=void 0===r?Rt:r;return function(e,t,n){void 0===n&&(n=o);var r,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Rt,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],l=!1,u={state:a,setOptions:function(n){var r="function"==typeof n?n(a.options):n;d(),a.options=Object.assign({},o,a.options,r),a.scrollParents={reference:Ve(e)?It(e):e.contextElement?It(e.contextElement):[],popper:It(t)};var s,l,h=function(e){var t=Wt(e);return We.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((s=[].concat(i,a.options.modifiers),l=s.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(l).map((function(e){return l[e]}))));return a.orderedModifiers=h.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,r=e.effect;if("function"==typeof r){var o=r({state:a,name:t,instance:u,options:i});c.push(o||function(){})}})),u.update()},forceUpdate:function(){if(!l){var e=a.elements,t=e.reference,n=e.popper;if(Ut(t,n)){a.rects={reference:qt(t,ut(n),"fixed"===a.options.strategy),popper:it(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var r=a.orderedModifiers[i],o=r.fn,s=r.options,c=void 0===s?{}:s,d=r.name;"function"==typeof o&&(a=o({state:a,options:c,name:d,instance:u})||a)}else a.reset=!1,i=-1}}},update:(r=function(){return new Promise((function(e){u.forceUpdate(),e(a)}))},function(){return s||(s=new Promise((function(e){Promise.resolve().then((function(){s=void 0,e(r())}))}))),s}),destroy:function(){d(),l=!0}};if(!Ut(e,t))return u;function d(){c.forEach((function(e){return e()})),c=[]}return u.setOptions(n).then((function(e){!l&&n.onFirstUpdate&&n.onFirstUpdate(e)})),u}}var Kt=Vt(),Yt=Vt({defaultModifiers:[wt,Ft,bt,Qe,Ht,Mt,zt,mt,Bt]}),Qt=Vt({defaultModifiers:[wt,Ft,bt,Qe]});const Xt=new Map,Gt={set(e,t,n){Xt.has(e)||Xt.set(e,new Map);const i=Xt.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(e,t)=>Xt.has(e)&&Xt.get(e).get(t)||null,remove(e,t){if(!Xt.has(e))return;const n=Xt.get(e);n.delete(t),0===n.size&&Xt.delete(e)}},Zt="transitionend",Jt=e=>(e&&window.CSS&&window.CSS.escape&&(e=e.replace(/#([^\s"#']+)/g,((e,t)=>`#${CSS.escape(t)}`))),e),en=e=>{e.dispatchEvent(new Event(Zt))},tn=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),nn=e=>tn(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(Jt(e)):null,rn=e=>{if(!tn(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(!n)return t;if(n!==e){const t=e.closest("summary");if(t&&t.parentNode!==n)return!1;if(null===t)return!1}return t},on=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),sn=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?sn(e.parentNode):null},an=()=>{},cn=e=>{e.offsetHeight},ln=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,un=[],dn=()=>"rtl"===document.documentElement.dir,hn=e=>{var t;t=()=>{const t=ln();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}},"loading"===document.readyState?(un.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of un)e()})),un.push(t)):t()},fn=(e,t=[],n=e)=>"function"==typeof e?e(...t):n,pn=(e,t,n=!0)=>{if(!n)return void fn(e);const i=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),r=Number.parseFloat(n);return i||r?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0})(t)+5;let r=!1;const o=({target:n})=>{n===t&&(r=!0,t.removeEventListener(Zt,o),fn(e))};t.addEventListener(Zt,o),setTimeout((()=>{r||en(t)}),i)},mn=(e,t,n,i)=>{const r=e.length;let o=e.indexOf(t);return-1===o?!n&&i?e[r-1]:e[0]:(o+=n?1:-1,i&&(o=(o+r)%r),e[Math.max(0,Math.min(o,r-1))])},gn=/[^.]*(?=\..*)\.|.*/,_n=/\..*/,vn=/::\d+$/,bn={};let yn=1;const wn={mouseenter:"mouseover",mouseleave:"mouseout"},En=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function An(e,t){return t&&`${t}::${yn++}`||e.uidEvent||yn++}function Tn(e){const t=An(e);return e.uidEvent=t,bn[t]=bn[t]||{},bn[t]}function kn(e,t,n=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===n))}function xn(e,t,n){const i="string"==typeof t,r=i?n:t||n;let o=In(e);return En.has(o)||(o=e),[i,r,o]}function Cn(e,t,n,i,r){if("string"!=typeof t||!e)return;let[o,s,a]=xn(t,n,i);if(t in wn){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};s=e(s)}const c=Tn(e),l=c[a]||(c[a]={}),u=kn(l,s,o?n:null);if(u)return void(u.oneOff=u.oneOff&&r);const d=An(s,t.replace(gn,"")),h=o?function(e,t,n){return function i(r){const o=e.querySelectorAll(t);for(let{target:s}=r;s&&s!==this;s=s.parentNode)for(const a of o)if(a===s)return jn(r,{delegateTarget:s}),i.oneOff&&Ln.off(e,r.type,t,n),n.apply(s,[r])}}(e,n,s):function(e,t){return function n(i){return jn(i,{delegateTarget:e}),n.oneOff&&Ln.off(e,i.type,t),t.apply(e,[i])}}(e,s);h.delegationSelector=o?n:null,h.callable=s,h.oneOff=r,h.uidEvent=d,l[d]=h,e.addEventListener(a,h,o)}function On(e,t,n,i,r){const o=kn(t[n],i,r);o&&(e.removeEventListener(n,o,Boolean(r)),delete t[n][o.uidEvent])}function Sn(e,t,n,i){const r=t[n]||{};for(const[o,s]of Object.entries(r))o.includes(i)&&On(e,t,n,s.callable,s.delegationSelector)}function In(e){return e=e.replace(_n,""),wn[e]||e}const Ln={on(e,t,n,i){Cn(e,t,n,i,!1)},one(e,t,n,i){Cn(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[r,o,s]=xn(t,n,i),a=s!==t,c=Tn(e),l=c[s]||{},u=t.startsWith(".");if(void 0===o){if(u)for(const n of Object.keys(c))Sn(e,c,n,t.slice(1));for(const[n,i]of Object.entries(l)){const r=n.replace(vn,"");a&&!t.includes(r)||On(e,c,s,i.callable,i.delegationSelector)}}else{if(!Object.keys(l).length)return;On(e,c,s,o,r?n:null)}},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=ln();let r=null,o=!0,s=!0,a=!1;t!==In(t)&&i&&(r=i.Event(t,n),i(e).trigger(r),o=!r.isPropagationStopped(),s=!r.isImmediatePropagationStopped(),a=r.isDefaultPrevented());const c=jn(new Event(t,{bubbles:o,cancelable:!0}),n);return a&&c.preventDefault(),s&&e.dispatchEvent(c),c.defaultPrevented&&r&&r.preventDefault(),c}};function jn(e,t={}){for(const[n,i]of Object.entries(t))try{e[n]=i}catch(t){Object.defineProperty(e,n,{configurable:!0,get:()=>i})}return e}function Pn(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function Dn(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const Mn={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${Dn(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${Dn(t)}`)},getDataAttributes(e){if(!e)return{};const t={},n=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=Pn(e.dataset[i])}return t},getDataAttribute:(e,t)=>Pn(e.getAttribute(`data-bs-${Dn(t)}`))};class Nn{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const n=tn(t)?Mn.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...tn(t)?Mn.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const[i,r]of Object.entries(t)){const t=e[i],o=tn(t)?"element":null==(n=t)?`${n}`:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(r).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${o}" but expected type "${r}".`)}var n}}class $n extends Nn{constructor(e,t){super(),(e=nn(e))&&(this._element=e,this._config=this._getConfig(t),Gt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){Gt.remove(this._element,this.constructor.DATA_KEY),Ln.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,n=!0){pn(e,t,n)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return Gt.get(nn(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.3.1"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const Bn=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?n.trim():null}return Jt(t)},Hn={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const n=[];let i=e.parentNode.closest(t);for(;i;)n.push(i),i=i.parentNode.closest(t);return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!on(e)&&rn(e)))},getSelectorFromElement(e){const t=Bn(e);return t&&Hn.findOne(t)?t:null},getElementFromSelector(e){const t=Bn(e);return t?Hn.findOne(t):null},getMultipleElementsFromSelector(e){const t=Bn(e);return t?Hn.find(t):[]}},Fn=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,i=e.NAME;Ln.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),on(this))return;const r=Hn.getElementFromSelector(this)||this.closest(`.${i}`);e.getOrCreateInstance(r)[t]()}))},zn=".bs.alert",qn=`close${zn}`,Wn=`closed${zn}`;class Rn extends $n{static get NAME(){return"alert"}close(){if(Ln.trigger(this._element,qn).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),Ln.trigger(this._element,Wn),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=Rn.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Fn(Rn,"close"),hn(Rn);const Un='[data-bs-toggle="button"]';class Vn extends $n{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=Vn.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}Ln.on(document,"click.bs.button.data-api",Un,(e=>{e.preventDefault();const t=e.target.closest(Un);Vn.getOrCreateInstance(t).toggle()})),hn(Vn);const Kn=".bs.swipe",Yn=`touchstart${Kn}`,Qn=`touchmove${Kn}`,Xn=`touchend${Kn}`,Gn=`pointerdown${Kn}`,Zn=`pointerup${Kn}`,Jn={endCallback:null,leftCallback:null,rightCallback:null},ei={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class ti extends Nn{constructor(e,t){super(),this._element=e,e&&ti.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Jn}static get DefaultType(){return ei}static get NAME(){return"swipe"}dispose(){Ln.off(this._element,Kn)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),fn(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&fn(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(Ln.on(this._element,Gn,(e=>this._start(e))),Ln.on(this._element,Zn,(e=>this._end(e))),this._element.classList.add("pointer-event")):(Ln.on(this._element,Yn,(e=>this._start(e))),Ln.on(this._element,Qn,(e=>this._move(e))),Ln.on(this._element,Xn,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const ni=".bs.carousel",ii=".data-api",ri="next",oi="prev",si="left",ai="right",ci=`slide${ni}`,li=`slid${ni}`,ui=`keydown${ni}`,di=`mouseenter${ni}`,hi=`mouseleave${ni}`,fi=`dragstart${ni}`,pi=`load${ni}${ii}`,mi=`click${ni}${ii}`,gi="carousel",_i="active",vi=".active",bi=".carousel-item",yi=vi+bi,wi={ArrowLeft:ai,ArrowRight:si},Ei={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Ai={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class Ti extends $n{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=Hn.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===gi&&this.cycle()}static get Default(){return Ei}static get DefaultType(){return Ai}static get NAME(){return"carousel"}next(){this._slide(ri)}nextWhenVisible(){!document.hidden&&rn(this._element)&&this.next()}prev(){this._slide(oi)}pause(){this._isSliding&&en(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?Ln.one(this._element,li,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void Ln.one(this._element,li,(()=>this.to(e)));const n=this._getItemIndex(this._getActive());if(n===e)return;const i=e>n?ri:oi;this._slide(i,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&Ln.on(this._element,ui,(e=>this._keydown(e))),"hover"===this._config.pause&&(Ln.on(this._element,di,(()=>this.pause())),Ln.on(this._element,hi,(()=>this._maybeEnableCycle()))),this._config.touch&&ti.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of Hn.find(".carousel-item img",this._element))Ln.on(e,fi,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(si)),rightCallback:()=>this._slide(this._directionToOrder(ai)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new ti(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=wi[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=Hn.findOne(vi,this._indicatorsElement);t.classList.remove(_i),t.removeAttribute("aria-current");const n=Hn.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);n&&(n.classList.add(_i),n.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const n=this._getActive(),i=e===ri,r=t||mn(this._getItems(),n,i,this._config.wrap);if(r===n)return;const o=this._getItemIndex(r),s=t=>Ln.trigger(this._element,t,{relatedTarget:r,direction:this._orderToDirection(e),from:this._getItemIndex(n),to:o});if(s(ci).defaultPrevented)return;if(!n||!r)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=r;const c=i?"carousel-item-start":"carousel-item-end",l=i?"carousel-item-next":"carousel-item-prev";r.classList.add(l),cn(r),n.classList.add(c),r.classList.add(c),this._queueCallback((()=>{r.classList.remove(c,l),r.classList.add(_i),n.classList.remove(_i,l,c),this._isSliding=!1,s(li)}),n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return Hn.findOne(yi,this._element)}_getItems(){return Hn.find(bi,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return dn()?e===si?oi:ri:e===si?ri:oi}_orderToDirection(e){return dn()?e===oi?si:ai:e===oi?ai:si}static jQueryInterface(e){return this.each((function(){const t=Ti.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}Ln.on(document,mi,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=Hn.getElementFromSelector(this);if(!t||!t.classList.contains(gi))return;e.preventDefault();const n=Ti.getOrCreateInstance(t),i=this.getAttribute("data-bs-slide-to");return i?(n.to(i),void n._maybeEnableCycle()):"next"===Mn.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),Ln.on(window,pi,(()=>{const e=Hn.find('[data-bs-ride="carousel"]');for(const t of e)Ti.getOrCreateInstance(t)})),hn(Ti);const ki=".bs.collapse",xi=`show${ki}`,Ci=`shown${ki}`,Oi=`hide${ki}`,Si=`hidden${ki}`,Ii=`click${ki}.data-api`,Li="show",ji="collapse",Pi="collapsing",Di=`:scope .${ji} .${ji}`,Mi='[data-bs-toggle="collapse"]',Ni={parent:null,toggle:!0},$i={parent:"(null|element)",toggle:"boolean"};class Bi extends $n{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const n=Hn.find(Mi);for(const e of n){const t=Hn.getSelectorFromElement(e),n=Hn.find(t).filter((e=>e===this._element));null!==t&&n.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Ni}static get DefaultType(){return $i}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>Bi.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(Ln.trigger(this._element,xi).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(ji),this._element.classList.add(Pi),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Pi),this._element.classList.add(ji,Li),this._element.style[t]="",Ln.trigger(this._element,Ci)}),this._element,!0),this._element.style[t]=`${this._element[n]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(Ln.trigger(this._element,Oi).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,cn(this._element),this._element.classList.add(Pi),this._element.classList.remove(ji,Li);for(const e of this._triggerArray){const t=Hn.getElementFromSelector(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Pi),this._element.classList.add(ji),Ln.trigger(this._element,Si)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Li)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=nn(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(Mi);for(const t of e){const e=Hn.getElementFromSelector(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=Hn.find(Di,this._config.parent);return Hn.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const n of e)n.classList.toggle("collapsed",!t),n.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const n=Bi.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}Ln.on(document,Ii,Mi,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();for(const e of Hn.getMultipleElementsFromSelector(this))Bi.getOrCreateInstance(e,{toggle:!1}).toggle()})),hn(Bi);const Hi="dropdown",Fi=".bs.dropdown",zi=".data-api",qi="ArrowUp",Wi="ArrowDown",Ri=`hide${Fi}`,Ui=`hidden${Fi}`,Vi=`show${Fi}`,Ki=`shown${Fi}`,Yi=`click${Fi}${zi}`,Qi=`keydown${Fi}${zi}`,Xi=`keyup${Fi}${zi}`,Gi="show",Zi='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Ji=`${Zi}.${Gi}`,er=".dropdown-menu",tr=dn()?"top-end":"top-start",nr=dn()?"top-start":"top-end",ir=dn()?"bottom-end":"bottom-start",rr=dn()?"bottom-start":"bottom-end",or=dn()?"left-start":"right-start",sr=dn()?"right-start":"left-start",ar={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},cr={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class lr extends $n{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=Hn.next(this._element,er)[0]||Hn.prev(this._element,er)[0]||Hn.findOne(er,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return ar}static get DefaultType(){return cr}static get NAME(){return Hi}toggle(){return this._isShown()?this.hide():this.show()}show(){if(on(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!Ln.trigger(this._element,Vi,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))Ln.on(e,"mouseover",an);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Gi),this._element.classList.add(Gi),Ln.trigger(this._element,Ki,e)}}hide(){if(on(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!Ln.trigger(this._element,Ri,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))Ln.off(e,"mouseover",an);this._popper&&this._popper.destroy(),this._menu.classList.remove(Gi),this._element.classList.remove(Gi),this._element.setAttribute("aria-expanded","false"),Mn.removeDataAttribute(this._menu,"popper"),Ln.trigger(this._element,Ui,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!tn(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Hi.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:tn(this._config.reference)?e=nn(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const n=this._getPopperConfig();this._popper=Yt(e,this._menu,n)}_isShown(){return this._menu.classList.contains(Gi)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return or;if(e.classList.contains("dropstart"))return sr;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?nr:tr:t?rr:ir}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(Mn.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...fn(this._config.popperConfig,[e])}}_selectMenuItem({key:e,target:t}){const n=Hn.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>rn(e)));n.length&&mn(n,t,e===Wi,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=lr.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=Hn.find(Ji);for(const n of t){const t=lr.getInstance(n);if(!t||!1===t._config.autoClose)continue;const i=e.composedPath(),r=i.includes(t._menu);if(i.includes(t._element)||"inside"===t._config.autoClose&&!r||"outside"===t._config.autoClose&&r)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const o={relatedTarget:t._element};"click"===e.type&&(o.clickEvent=e),t._completeHide(o)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),n="Escape"===e.key,i=[qi,Wi].includes(e.key);if(!i&&!n)return;if(t&&!n)return;e.preventDefault();const r=this.matches(Zi)?this:Hn.prev(this,Zi)[0]||Hn.next(this,Zi)[0]||Hn.findOne(Zi,e.delegateTarget.parentNode),o=lr.getOrCreateInstance(r);if(i)return e.stopPropagation(),o.show(),void o._selectMenuItem(e);o._isShown()&&(e.stopPropagation(),o.hide(),r.focus())}}Ln.on(document,Qi,Zi,lr.dataApiKeydownHandler),Ln.on(document,Qi,er,lr.dataApiKeydownHandler),Ln.on(document,Yi,lr.clearMenus),Ln.on(document,Xi,lr.clearMenus),Ln.on(document,Yi,Zi,(function(e){e.preventDefault(),lr.getOrCreateInstance(this).toggle()})),hn(lr);const ur="backdrop",dr="show",hr=`mousedown.bs.${ur}`,fr={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},pr={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class mr extends Nn{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return fr}static get DefaultType(){return pr}static get NAME(){return ur}show(e){if(!this._config.isVisible)return void fn(e);this._append();const t=this._getElement();this._config.isAnimated&&cn(t),t.classList.add(dr),this._emulateAnimation((()=>{fn(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(dr),this._emulateAnimation((()=>{this.dispose(),fn(e)}))):fn(e)}dispose(){this._isAppended&&(Ln.off(this._element,hr),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=nn(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),Ln.on(e,hr,(()=>{fn(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){pn(e,this._getElement(),this._config.isAnimated)}}const gr=".bs.focustrap",_r=`focusin${gr}`,vr=`keydown.tab${gr}`,br="backward",yr={autofocus:!0,trapElement:null},wr={autofocus:"boolean",trapElement:"element"};class Er extends Nn{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return yr}static get DefaultType(){return wr}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),Ln.off(document,gr),Ln.on(document,_r,(e=>this._handleFocusin(e))),Ln.on(document,vr,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,Ln.off(document,gr))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const n=Hn.focusableChildren(t);0===n.length?t.focus():this._lastTabNavDirection===br?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?br:"forward")}}const Ar=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Tr=".sticky-top",kr="padding-right",xr="margin-right";class Cr{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,kr,(t=>t+e)),this._setElementAttributes(Ar,kr,(t=>t+e)),this._setElementAttributes(Tr,xr,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,kr),this._resetElementAttributes(Ar,kr),this._resetElementAttributes(Tr,xr)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const r=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${n(Number.parseFloat(r))}px`)}))}_saveInitialAttribute(e,t){const n=e.style.getPropertyValue(t);n&&Mn.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const n=Mn.getDataAttribute(e,t);null!==n?(Mn.removeDataAttribute(e,t),e.style.setProperty(t,n)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(tn(e))t(e);else for(const n of Hn.find(e,this._element))t(n)}}const Or=".bs.modal",Sr=`hide${Or}`,Ir=`hidePrevented${Or}`,Lr=`hidden${Or}`,jr=`show${Or}`,Pr=`shown${Or}`,Dr=`resize${Or}`,Mr=`click.dismiss${Or}`,Nr=`mousedown.dismiss${Or}`,$r=`keydown.dismiss${Or}`,Br=`click${Or}.data-api`,Hr="modal-open",Fr="show",zr="modal-static",qr={backdrop:!0,focus:!0,keyboard:!0},Wr={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Rr extends $n{constructor(e,t){super(e,t),this._dialog=Hn.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Cr,this._addEventListeners()}static get Default(){return qr}static get DefaultType(){return Wr}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||Ln.trigger(this._element,jr,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Hr),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){this._isShown&&!this._isTransitioning&&(Ln.trigger(this._element,Sr).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Fr),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){Ln.off(window,Or),Ln.off(this._dialog,Or),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new mr({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Er({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=Hn.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),cn(this._element),this._element.classList.add(Fr),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,Ln.trigger(this._element,Pr,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){Ln.on(this._element,$r,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),Ln.on(window,Dr,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),Ln.on(this._element,Nr,(e=>{Ln.one(this._element,Mr,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Hr),this._resetAdjustments(),this._scrollBar.reset(),Ln.trigger(this._element,Lr)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(Ln.trigger(this._element,Ir).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(zr)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(zr),this._queueCallback((()=>{this._element.classList.remove(zr),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;if(n&&!e){const e=dn()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!n&&e){const e=dn()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=Rr.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}Ln.on(document,Br,'[data-bs-toggle="modal"]',(function(e){const t=Hn.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),Ln.one(t,jr,(e=>{e.defaultPrevented||Ln.one(t,Lr,(()=>{rn(this)&&this.focus()}))}));const n=Hn.findOne(".modal.show");n&&Rr.getInstance(n).hide(),Rr.getOrCreateInstance(t).toggle(this)})),Fn(Rr),hn(Rr);const Ur=".bs.offcanvas",Vr=".data-api",Kr=`load${Ur}${Vr}`,Yr="show",Qr="showing",Xr="hiding",Gr=".offcanvas.show",Zr=`show${Ur}`,Jr=`shown${Ur}`,eo=`hide${Ur}`,to=`hidePrevented${Ur}`,no=`hidden${Ur}`,io=`resize${Ur}`,ro=`click${Ur}${Vr}`,oo=`keydown.dismiss${Ur}`,so={backdrop:!0,keyboard:!0,scroll:!1},ao={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class co extends $n{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return so}static get DefaultType(){return ao}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||Ln.trigger(this._element,Zr,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Cr).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Qr),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(Yr),this._element.classList.remove(Qr),Ln.trigger(this._element,Jr,{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(Ln.trigger(this._element,eo).defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(Xr),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove(Yr,Xr),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Cr).reset(),Ln.trigger(this._element,no)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new mr({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():Ln.trigger(this._element,to)}:null})}_initializeFocusTrap(){return new Er({trapElement:this._element})}_addEventListeners(){Ln.on(this._element,oo,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():Ln.trigger(this._element,to))}))}static jQueryInterface(e){return this.each((function(){const t=co.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Ln.on(document,ro,'[data-bs-toggle="offcanvas"]',(function(e){const t=Hn.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),on(this))return;Ln.one(t,no,(()=>{rn(this)&&this.focus()}));const n=Hn.findOne(Gr);n&&n!==t&&co.getInstance(n).hide(),co.getOrCreateInstance(t).toggle(this)})),Ln.on(window,Kr,(()=>{for(const e of Hn.find(Gr))co.getOrCreateInstance(e).show()})),Ln.on(window,io,(()=>{for(const e of Hn.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&co.getOrCreateInstance(e).hide()})),Fn(co),hn(co);const lo={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},uo=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),ho=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,fo=(e,t)=>{const n=e.nodeName.toLowerCase();return t.includes(n)?!uo.has(n)||Boolean(ho.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(n)))},po={allowList:lo,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},mo={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},go={entry:"(string|element|function|null)",selector:"(string|element)"};class _o extends Nn{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return po}static get DefaultType(){return mo}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,n]of Object.entries(this._config.content))this._setContent(e,n,t);const t=e.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&t.classList.add(...n.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,n]of Object.entries(e))super._typeCheckConfig({selector:t,entry:n},go)}_setContent(e,t,n){const i=Hn.findOne(n,e);i&&((t=this._resolvePossibleFunction(t))?tn(t)?this._putElementInTemplate(nn(t),i):this._config.html?i.innerHTML=this._maybeSanitize(t):i.textContent=t:i.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),r=[].concat(...i.body.querySelectorAll("*"));for(const e of r){const n=e.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){e.remove();continue}const i=[].concat(...e.attributes),r=[].concat(t["*"]||[],t[n]||[]);for(const t of i)fo(t,r)||e.removeAttribute(t.nodeName)}return i.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return fn(e,[this])}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const vo=new Set(["sanitize","allowList","sanitizeFn"]),bo="fade",yo="show",wo=".modal",Eo="hide.bs.modal",Ao="hover",To="focus",ko={AUTO:"auto",TOP:"top",RIGHT:dn()?"left":"right",BOTTOM:"bottom",LEFT:dn()?"right":"left"},xo={allowList:lo,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Co={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class Oo extends $n{constructor(e,n){if(void 0===t)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,n),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return xo}static get DefaultType(){return Co}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),Ln.off(this._element.closest(wo),Eo,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=Ln.trigger(this._element,this.constructor.eventName("show")),t=(sn(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),Ln.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(n),n.classList.add(yo),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))Ln.on(e,"mouseover",an);this._queueCallback((()=>{Ln.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(this._isShown()&&!Ln.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(yo),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))Ln.off(e,"mouseover",an);this._activeTrigger.click=!1,this._activeTrigger[To]=!1,this._activeTrigger[Ao]=!1,this._isHovered=null,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),Ln.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(bo,yo),t.classList.add(`bs-${this.constructor.NAME}-auto`);const n=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",n),this._isAnimated()&&t.classList.add(bo),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new _o({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(bo)}_isShown(){return this.tip&&this.tip.classList.contains(yo)}_createPopper(e){const t=fn(this._config.placement,[this,e,this._element]),n=ko[t.toUpperCase()];return Yt(this._element,e,this._getPopperConfig(n))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return fn(e,[this._element])}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,...fn(this._config.popperConfig,[t])}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)Ln.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===Ao?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),n=t===Ao?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");Ln.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?To:Ao]=!0,t._enter()})),Ln.on(this._element,n,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?To:Ao]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},Ln.on(this._element.closest(wo),Eo,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=Mn.getDataAttributes(this._element);for(const e of Object.keys(t))vo.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:nn(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const[t,n]of Object.entries(this._config))this.constructor.Default[t]!==n&&(e[t]=n);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=Oo.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}hn(Oo);const So={...Oo.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},Io={...Oo.DefaultType,content:"(null|string|element|function)"};class Lo extends Oo{static get Default(){return So}static get DefaultType(){return Io}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=Lo.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}hn(Lo);const jo=".bs.scrollspy",Po=`activate${jo}`,Do=`click${jo}`,Mo=`load${jo}.data-api`,No="active",$o="[href]",Bo=".nav-link",Ho=`${Bo}, .nav-item > ${Bo}, .list-group-item`,Fo={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},zo={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class qo extends $n{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Fo}static get DefaultType(){return zo}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=nn(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(Ln.off(this._config.target,Do),Ln.on(this._config.target,Do,$o,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const n=this._rootElement||window,i=t.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i,behavior:"smooth"});n.scrollTop=i}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),n=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},i=(this._rootElement||document.documentElement).scrollTop,r=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const o of e){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(o));continue}const e=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(r&&e){if(n(o),!i)return}else r||e||n(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=Hn.find($o,this._config.target);for(const t of e){if(!t.hash||on(t))continue;const e=Hn.findOne(decodeURI(t.hash),this._element);rn(e)&&(this._targetLinks.set(decodeURI(t.hash),t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(No),this._activateParents(e),Ln.trigger(this._element,Po,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))Hn.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(No);else for(const t of Hn.parents(e,".nav, .list-group"))for(const e of Hn.prev(t,Ho))e.classList.add(No)}_clearActiveClass(e){e.classList.remove(No);const t=Hn.find(`${$o}.${No}`,e);for(const e of t)e.classList.remove(No)}static jQueryInterface(e){return this.each((function(){const t=qo.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ln.on(window,Mo,(()=>{for(const e of Hn.find('[data-bs-spy="scroll"]'))qo.getOrCreateInstance(e)})),hn(qo);const Wo=".bs.tab",Ro=`hide${Wo}`,Uo=`hidden${Wo}`,Vo=`show${Wo}`,Ko=`shown${Wo}`,Yo=`click${Wo}`,Qo=`keydown${Wo}`,Xo=`load${Wo}`,Go="ArrowLeft",Zo="ArrowRight",Jo="ArrowUp",es="ArrowDown",ts="Home",ns="End",is="active",rs="fade",os="show",ss=":not(.dropdown-toggle)",as='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',cs=`.nav-link${ss}, .list-group-item${ss}, [role="tab"]${ss}, ${as}`,ls=`.${is}[data-bs-toggle="tab"], .${is}[data-bs-toggle="pill"], .${is}[data-bs-toggle="list"]`;class us extends $n{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),Ln.on(this._element,Qo,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),n=t?Ln.trigger(t,Ro,{relatedTarget:e}):null;Ln.trigger(e,Vo,{relatedTarget:t}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){e&&(e.classList.add(is),this._activate(Hn.getElementFromSelector(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),Ln.trigger(e,Ko,{relatedTarget:t})):e.classList.add(os)}),e,e.classList.contains(rs)))}_deactivate(e,t){e&&(e.classList.remove(is),e.blur(),this._deactivate(Hn.getElementFromSelector(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),Ln.trigger(e,Uo,{relatedTarget:t})):e.classList.remove(os)}),e,e.classList.contains(rs)))}_keydown(e){if(![Go,Zo,Jo,es,ts,ns].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=this._getChildren().filter((e=>!on(e)));let n;if([ts,ns].includes(e.key))n=t[e.key===ts?0:t.length-1];else{const i=[Zo,es].includes(e.key);n=mn(t,e.target,i,!0)}n&&(n.focus({preventScroll:!0}),us.getOrCreateInstance(n).show())}_getChildren(){return Hn.find(cs,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=Hn.getElementFromSelector(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`${e.id}`))}_toggleDropDown(e,t){const n=this._getOuterElement(e);if(!n.classList.contains("dropdown"))return;const i=(e,i)=>{const r=Hn.findOne(e,n);r&&r.classList.toggle(i,t)};i(".dropdown-toggle",is),i(".dropdown-menu",os),n.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}_elemIsActive(e){return e.classList.contains(is)}_getInnerElement(e){return e.matches(cs)?e:Hn.findOne(cs,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=us.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ln.on(document,Yo,as,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),on(this)||us.getOrCreateInstance(this).show()})),Ln.on(window,Xo,(()=>{for(const e of Hn.find(ls))us.getOrCreateInstance(e)})),hn(us);const ds=".bs.toast",hs=`mouseover${ds}`,fs=`mouseout${ds}`,ps=`focusin${ds}`,ms=`focusout${ds}`,gs=`hide${ds}`,_s=`hidden${ds}`,vs=`show${ds}`,bs=`shown${ds}`,ys="hide",ws="show",Es="showing",As={animation:"boolean",autohide:"boolean",delay:"number"},Ts={animation:!0,autohide:!0,delay:5e3};class ks extends $n{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Ts}static get DefaultType(){return As}static get NAME(){return"toast"}show(){Ln.trigger(this._element,vs).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(ys),cn(this._element),this._element.classList.add(ws,Es),this._queueCallback((()=>{this._element.classList.remove(Es),Ln.trigger(this._element,bs),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(Ln.trigger(this._element,gs).defaultPrevented||(this._element.classList.add(Es),this._queueCallback((()=>{this._element.classList.add(ys),this._element.classList.remove(Es,ws),Ln.trigger(this._element,_s)}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(ws),super.dispose()}isShown(){return this._element.classList.contains(ws)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){Ln.on(this._element,hs,(e=>this._onInteraction(e,!0))),Ln.on(this._element,fs,(e=>this._onInteraction(e,!1))),Ln.on(this._element,ps,(e=>this._onInteraction(e,!0))),Ln.on(this._element,ms,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=ks.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Fn(ks),hn(ks);var xs,Cs=function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))},Os=function(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},Ss=(document.getElementById("jegaRadi"),document.getElementById("slika"));function Is(){var e=document.getElementById("popup");console.log("uso sam u zsatvori popup"),e.style.display="none"}W(2e3).pipe(K((function(){var e=Math.floor(7*Math.random());switch(console.log(e),e){case 0:return"slike/oats.png";case 1:return"slike1/bananas.png";case 2:return"slike1/pancakes.png";case 3:return"slike1/potato.png";case 4:return"slike1/rice.png";case 5:return"slike1/turkey.png";case 6:return"slike1/trout.png";case 7:return"slike1/pizza.png"}}))).subscribe({next:function(e){Ss.src=e},complete:function(){console.log("Observable je završio emitovanje.")}}),W(3e3).pipe().subscribe((function(e){if(0===e)return"slike/calculator.png"}));var Ls=document.getElementById("ZatvoriPopup");document.getElementById("ZatvoriPopup1").addEventListener("click",(function(){Is()})),Ls.addEventListener("click",(function(){console.log("aaa"),Is()}));function js(e){return le(fetch("http://localhost:3000/groceries/"+e).then((function(e){if(!e.ok)throw new Error("Food not found!");return e.json()})).catch((function(e){console.error(e)})))}var Ps=document.getElementById("namirnicaInput"),Ds=document.getElementById("dugmeObrisiNamirnicu"),Ms="";function Ns(e){var t=document.getElementById("modal"),n=document.getElementById("dodavanjeNamirnice"),i=document.getElementById("labelUnos"),r=document.getElementById("slikaDodavanje");console.log(e),"uspesno"==e?(console.log("Usao sam u uspesno"),n.textContent="Uspesno ste dodali ".concat(i),r.src="slike/checked.png"):(console.log("Usao sam u neuspesno"),n.textContent="Naziv namirnice i kolicina su obavezna input polja",r.src="slike/close.png"),t.style.display="block"}function $s(){document.getElementById("modal").style.display="none"}document.getElementById("zatvoriDodavanjeNamirnica").addEventListener("click",(function(){$s()}));var Bs=document.getElementById("close");function Hs(){return Cs(this,void 0,void 0,(function(){var e;return Os(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,,4]),[4,fetch("../groceries-db.json")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent().groceries];case 3:return e=t.sent(),console.error("Error fetching groceries:",e),[2,[]];case 4:return[2]}}))}))}Bs&&Bs.addEventListener("click",(function(){$s()}));var Fs=document.getElementById("dugmeVratiSveNamirnice");Fs&&Fs.addEventListener("click",(function(){!function(){Cs(this,void 0,void 0,(function(){var e,t,n,i,r,o;return Os(this,(function(s){switch(s.label){case 0:return s.trys.push([0,2,,3]),[4,Hs()];case 1:return e=s.sent(),t=document.getElementById("tabela-namirnica"),n=document.createElement("thead"),(i=document.createElement("tr")).innerHTML="\n      <th> </>\n      <th>Naziv</th>\n      <th>Proteini (g)</th>\n      <th>Ugljeni hidrati (g)</th>\n      <th>Masti (g)</th>\n      <th>Kcal/100g</th>\n    ",n.appendChild(i),t.appendChild(n),r=document.createElement("tbody"),e.forEach((function(e,t){var n=document.createElement("tr");n.innerHTML="\n        <td >".concat(t+1+".","</td>\n       \n        <td>").concat(e.name,"</td>\n        <td>").concat(e.P,"</td>\n        <td>").concat(e.UH,"</td>\n        <td>").concat(e.M,"</td>\n        <td>").concat(e.Kcal,"</td>\n      "),r.appendChild(n)})),t.appendChild(r),r.addEventListener("click",(function(e){var t=e.target.closest("tr");if(t){var n=t.getAttribute("data-name");n&&console.log(n)}})),[3,3];case 2:return o=s.sent(),console.error("Error fetching and printing groceries:",o),[3,3];case 3:return[2]}}))}))}()})),Ps&&Ps.addEventListener("input",(function(){Ms=Ps.value,console.log(Ms)})),Ds&&Ds.addEventListener("click",(function(){var e,t;1==function(e){console.log(e);var t=localStorage.getItem(e);return localStorage.removeItem(e),null!==t}(Ms)?(e=document.getElementById("uspesnoBrisanje"),t=document.getElementById("slikaZaBrisanje"),document.getElementById("BrisanjeNamirniceh3").textContent="Obrisali ste namirnicu ".concat(Ms),t.src="slike/checked.png",e?e.style.display="block":console.log("Nije pronadjen ")):function(){var e=document.getElementById("uspesnoBrisanje");document.getElementById("slikaZaBrisanje").src="slike/close.png";var t=document.getElementById("BrisanjeNamirniceh3");console.log("Namirnica za brisanje ima vrednost : ".concat(Ms," ")),t.textContent=""==Ms?"Unesite naziv namirnice koju zelite da izbacite iz korpe":"Namirnica ".concat(Ms," se ne nalazi u korpi"),e&&(e.style.display="block")}()})),document.getElementById("zatvoriUspesnoBrisanjeBtn").addEventListener("click",(function(){document.getElementById("uspesnoBrisanje").style.display="none"})),document.getElementById("hideSectionRadio"),document.querySelector(".zaPrikaz"),window.toggleSection=function(e){document.querySelectorAll(".zaPrikaz").forEach((function(e){e.style.display="none"}));var t=document.getElementById(e);t instanceof HTMLElement&&(t.style.display="block")},function(){var e=document.querySelector(".labelUnos"),t=document.querySelector(".labelGrami"),n=0,i="",r=document.querySelector(".prikazProteina"),o=document.querySelector(".prikazHidrata"),s=document.querySelector(".prikazMasti"),a=document.querySelector(".prikazKalorija"),c=document.getElementById("nextPageButton");e&&t&&me(e,"input").pipe(_e(500),K((function(e){return e.target.value.trim()})),ve((function(e){return""!==e?js(e):be(null)}))).subscribe((function(t){t&&(i=e.value,console.log("Podaci:",t))}),(function(e){console.error("Greška pri dobijanju podataka sa servera:",e)})),c.addEventListener("click",(function(){var e=document.getElementById("infoNamirnica").value,t=encodeURIComponent(e);window.location.href="groceries-info.html?value=".concat(t)})),e?e.addEventListener("input",(function(){i=e.value,console.log(i)})):console.error('Element sa ID-om "labelUnos" nije pronađen.'),t?me(t,"input").pipe(_e(500),K((function(e){return e.target.value.trim()})),ve((function(e){var t=parseInt(e,10);return isNaN(t)?(console.error("Unesena količina nije validan broj."),n=0,r.innerHTML="0g",o.innerHTML="0g",s.innerHTML="0g",a.innerHTML="0g",be(null)):(n=t,console.log(n),""!==e?js(i):void 0)}))).subscribe((function(e){if(e){var t=n/100*e.P,i=n/100*e.UH,c=n/100*e.M,l=n/100*e.Kcal;r.innerHTML=t.toFixed(2)+"g",o.innerHTML=i.toFixed(2)+"g",s.innerHTML=c.toFixed(2)+"g",a.innerHTML=l.toFixed(2)+"Kcal"}}),(function(e){console.error("Greška pri dobijanju podataka sa servera:",e)})):console.error('Element sa ID-om "labelKolicina" nije pronađen.'),document.querySelector(".labelP")&&console.log("Pronadjen je element"),me(e,"input").pipe(_e(500),K((function(e){return e.target.value})),ve((function(e){return js(e)}))).subscribe((function(e){e.P,e.UH,e.M,e.Kcal,console.log("Podaci:",e.P,e.UH,e.M,e.Kcal,n)}),(function(e){console.error("Greška pri dobijanju podataka sa servera:",e)}));var l=document.getElementById("dugmeDodaj");Ps.addEventListener("input",(function(){Ms=Ps.value,console.log(Ms)})),l?(console.log("Input za kolicinu : ".concat(t.value)),me(l,"click").subscribe((function(){var e,n={id:i,name:Ms,P:parseFloat(r.innerHTML),UH:parseFloat(o.innerHTML),M:parseFloat(s.innerHTML),Kcal:parseFloat(a.innerHTML),Opis:"",Gramaza:parseFloat(t.value)};console.log(" Vrednosti koje ce da se upisu u local storage su ".concat(n)),console.log("Vrednost je : ".concat(i)),console.log("Vrednost za gramazu je  je : ".concat(t.value)),""!=i&&""!=t.value?(e=n,console.log("Pozvana je fja upisiUlocalstorage i vrenodsti objekta su  \n    ".concat(e.id,"   ").concat(e.name,", ").concat(e.P," ").concat(e.UH," ").concat(e.M," ").concat(e.Kcal," ")),localStorage.setItem(e.id,JSON.stringify(e)),Ns("uspesno"),setTimeout($s,3e3)):Ns("neuspesno")}))):console.error('Element sa ID-om "dugmeDodaj" nije pronađen.');var u=document.getElementById("dugmeProcitaj");u&&u.addEventListener("click",(function(){!function(){var e,t=document.getElementById("popup"),n=document.getElementById("popup-namirnice");n.innerHTML="";for(var i=0,r=0,o=0,s=0,a=0;a<localStorage.length;a++){var c=localStorage.key(a),l=localStorage.getItem(c);try{for(var u=JSON.parse(l),d={Proteini:u.P,Masti:u.M,"Ugljeni hidrati":u.UH,Kcal:u.Kcal,Kolicina:u.Gramaza+" g"},h=(e=c).charAt(0).toUpperCase()+e.slice(1)+": ",f=0,p=Object.entries(d);f<p.length;f++){var m=p[f],g=m[0],_=m[1];h+="".concat(g,": ").concat(_,", ")}n.innerHTML+="<div>".concat(h,"</div>"),i+=d.Proteini,r+=d.Masti,o+=d["Ugljeni hidrati"],s+=d.Kcal}catch(e){n.innerHTML+="<div>".concat(c,": ").concat(l,"</div>")}}n.innerHTML+="<hr>",i=parseFloat(i.toFixed(2)),r=parseFloat(r.toFixed(2)),o=parseFloat(o.toFixed(2)),s=parseFloat(s.toFixed(2)),document.querySelector(".bmr"),n.innerHTML+='  <span style="color: red;"> Vas TDEE: </span> '.concat(xs),n.innerHTML+='<div> <span style="color: red;">Proteini:</span> '.concat(i,', <span style="color: red;">Masti:</span> ').concat(r,', <span style="color: red;">Ugljeni hidrati:</span> ').concat(o,", Kcal: ").concat(s,"</div>"),t.style.display="block"}()}));var d=document.getElementById("obrisiKonzolu");d&&d.addEventListener("click",(function(){console.clear();var e=document.getElementById("obrisanaPoruka");e&&(e.style.display="block",setTimeout((function(){e.style.display="none"}),3e3))}));var h=document.getElementById("dugmeObrisiSveIzSveske");h&&h.addEventListener("click",(function(){localStorage.clear()}))}();var zs,qs,Ws,Rs,Us,Vs,Ks,Ys,Qs,Xs=0,Gs=0,Zs=document.getElementById("calculate");function Js(e){switch(Vs){case"Neaktivan":Ys=Math.round(1.2*e);break;case"Slabo aktivan":Ys=Math.round(1.375*e);break;case"Umereno aktivan":Ys=Math.round(1.55*e);break;case"Veeoma aktivan":Ys=Math.round(1.725*e);break;case"Ekstremno aktivan":Ys=Math.round(1.9*e)}}function ea(e,t){console.log("Usao sam u fju!");var n=document.getElementById("results");n&&(n.style.display="block");var i=document.querySelector(".bmr"),r=document.querySelector(".tdee"),o=document.querySelector(".maintain"),s=document.querySelector(".lose-1lb"),a=document.querySelector(".lose-oneandhalflb"),c=document.querySelector(".lose-2lb"),l=document.getElementById("loading");l&&(l.style.display="none"),console.log(t),console.log(e),i&&void 0!==e&&(i.innerHTML+="  BMR:  ".concat(e)),r&&void 0!==t&&(r.innerHTML+="  TDEE: ".concat(t),xs=t),r&&void 0!==t&&(o.innerHTML+=" ".concat(t," Calories")),r&&void 0!==t&&(s.innerHTML+=" ".concat(t-500," Calories")),r&&void 0!==t&&(a.innerHTML+=" ".concat(t-750," Calories")),r&&void 0!==t&&(c.innerHTML+=" ".concat(t-1e3," Calories"))}function ta(){var e=document.querySelector(".alert");e&&e.remove()}Zs&&Zs.addEventListener("click",(function(){console.log("Pozivam calculate  bmr"),zs=parseInt(document.getElementById("age").value),qs=document.getElementById("weight").value,Ws=parseInt(document.getElementById("height-feet").value),Rs=parseInt(document.getElementById("height-inch").value),Us=document.getElementById("gender").value,Vs=document.getElementById("activity").value,Qs=document.getElementById("breast-feeding").value,console.log(qs),function(e,t,n){void 0!==e&&(Xs=parseFloat(e),console.log(Xs)),void 0!==t&&void 0!==n&&(Gs=2.54*(12*t+n))}(qs,Ws,Rs),isNaN(zs)||void 0===qs?function(e){var t=document.getElementById("results");t&&(t.style.display="none");var n=document.getElementById("loading");n&&(n.style.display="none");var i=document.createElement("div"),r=document.querySelector(".myForm"),o=document.querySelector(".field");i.className="alert alert-danger",i.appendChild(document.createTextNode("Please fill out all fields before submitting")),r&&o&&r.insertBefore(i,o),setTimeout(ta,5e3)}():(document.querySelector(".submit"),"Female"===Us?(Ks=655+9.6*Xs+1.8*Gs-4.7*zs,Ks=Math.round(Ks),Js("Yes"===Qs?Ks+=450:Ks),ea(Ks,Ys)):(console.log(Us,zs,qs,Xs,Gs),Ks=66+13.7*Xs+5*Gs-6.8*zs,Js(Ks=Math.round(Ks)),ea(Ks,Ys)))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,