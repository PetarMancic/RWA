/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{afterMain:()=>Ke,afterRead:()=>Ue,afterWrite:()=>Qe,applyStyles:()=>nt,arrow:()=>Et,auto:()=>Le,basePlacements:()=>je,beforeMain:()=>We,beforeRead:()=>Fe,beforeWrite:()=>Ve,bottom:()=>Ce,clippingParents:()=>Ne,computeStyles:()=>At,createPopper:()=>tn,createPopperBase:()=>en,createPopperLite:()=>nn,detectOverflow:()=>Ft,end:()=>Pe,eventListeners:()=>Ct,flip:()=>qt,hide:()=>Rt,left:()=>Ie,main:()=>Re,modifierPhases:()=>Xe,offset:()=>Kt,placements:()=>ze,popper:()=>$e,popperGenerator:()=>Jt,popperOffsets:()=>Vt,preventOverflow:()=>Yt,read:()=>qe,reference:()=>Be,right:()=>Oe,start:()=>Me,top:()=>Se,variationPlacements:()=>He,viewport:()=>De,write:()=>Ye});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},n(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}function r(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function o(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function s(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,r,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return s}function a(e,t,n){if(n||2===arguments.length)for(var i,r=0,o=t.length;r<o;r++)!i&&r in t||(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}function c(e){return this instanceof c?(this.v=e,this):new c(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var l=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function u(e){return"function"==typeof e}function d(e){return u(null==e?void 0:e.then)}var h,f=((h=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),h.prototype.constructor=h,h);function p(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var m=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,t,n,i,r;if(!this.closed){this.closed=!0;var c=this._parentage;if(c)if(this._parentage=null,Array.isArray(c))try{for(var l=o(c),d=l.next();!d.done;d=l.next())d.value.remove(this)}catch(t){e={error:t}}finally{try{d&&!d.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}else c.remove(this);var h=this.initialTeardown;if(u(h))try{h()}catch(e){r=e instanceof f?e.errors:[e]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var m=o(p),g=m.next();!g.done;g=m.next()){var _=g.value;try{v(_)}catch(e){r=null!=r?r:[],e instanceof f?r=a(a([],s(r)),s(e.errors)):r.push(e)}}}catch(e){n={error:e}}finally{try{g&&!g.done&&(i=m.return)&&i.call(m)}finally{if(n)throw n.error}}}if(r)throw new f(r)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&p(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&p(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}();function g(e){return e instanceof m||e&&"closed"in e&&u(e.remove)&&u(e.add)&&u(e.unsubscribe)}function v(e){u(e)?e():e.unsubscribe()}m.EMPTY;var _={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var r=b.delegate;return(null==r?void 0:r.setTimeout)?r.setTimeout.apply(r,a([e,t],s(n))):setTimeout.apply(void 0,a([e,t],s(n)))},clearTimeout:function(e){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function y(e){b.setTimeout((function(){var t=_.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var E=k("C",void 0,void 0);function k(e,t,n){return{kind:e,value:t,error:n}}var x=null,T=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,g(t)&&t.add(n)):n.destination=j,n}return i(t,e),t.create=function(e,t,n){return new O(e,t,n)},t.prototype.next=function(e){this.isStopped?L(function(e){return k("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?L(k("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?L(E,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(m),A=Function.prototype.bind;function S(e,t){return A.call(e,t)}var C=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){I(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){I(e)}else I(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){I(e)}},e}(),O=function(e){function t(t,n,i){var r,o,s=e.call(this)||this;return u(t)||!t?r={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=i?i:void 0}:s&&_.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},r={next:t.next&&S(t.next,o),error:t.error&&S(t.error,o),complete:t.complete&&S(t.complete,o)}):r=t,s.destination=new C(r),s}return i(t,e),t}(T);function I(e){var t;_.useDeprecatedSynchronousErrorHandling?(t=e,_.useDeprecatedSynchronousErrorHandling&&x&&(x.errorThrown=!0,x.error=t)):y(e)}function L(e,t){var n=_.onStoppedNotification;n&&b.setTimeout((function(){return n(e,t)}))}var j={closed:!0,next:w,error:function(e){throw e},complete:w},M="function"==typeof Symbol&&Symbol.observable||"@@observable";function P(e){return e}var N=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var i,r=this,o=(i=e)&&i instanceof T||function(e){return e&&u(e.next)&&u(e.error)&&u(e.complete)}(i)&&g(i)?e:new O(e,t,n);return function(e){if(_.useDeprecatedSynchronousErrorHandling){var t=!x;if(t&&(x={errorThrown:!1,error:null}),e(),t){var n=x,i=n.errorThrown,r=n.error;if(x=null,i)throw r}}else e()}((function(){var e=r,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?r._subscribe(o):r._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=D(t))((function(t,i){var r=new O({next:function(t){try{e(t)}catch(e){i(e),r.unsubscribe()}},error:i,complete:t});n.subscribe(r)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[M]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?P:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=D(e))((function(e,n){var i;t.subscribe((function(e){return i=e}),(function(e){return n(e)}),(function(){return e(i)}))}))},e.create=function(t){return new e(t)},e}();function D(e){var t;return null!==(t=null!=e?e:_.Promise)&&void 0!==t?t:Promise}function $(e){return u(e[M])}function B(e){return Symbol.asyncIterator&&u(null==e?void 0:e[Symbol.asyncIterator])}function H(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var z="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function F(e){return u(null==e?void 0:e[z])}function q(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,r=n.apply(e,t||[]),o=[];return i={},s("next"),s("throw"),s("return"),i[Symbol.asyncIterator]=function(){return this},i;function s(e){r[e]&&(i[e]=function(t){return new Promise((function(n,i){o.push([e,t,n,i])>1||a(e,t)}))})}function a(e,t){try{(n=r[e](t)).value instanceof c?Promise.resolve(n.value.v).then(l,u):d(o[0][2],n)}catch(e){d(o[0][3],e)}var n}function l(e){a("next",e)}function u(e){a("throw",e)}function d(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var t,n,i;return r(this,(function(r){switch(r.label){case 0:t=e.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,c(t.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,c(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,c(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function U(e){return u(null==e?void 0:e.getReader)}function W(e){if(e instanceof N)return e;if(null!=e){if($(e))return r=e,new N((function(e){var t=r[M]();if(u(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(l(e))return i=e,new N((function(e){for(var t=0;t<i.length&&!e.closed;t++)e.next(i[t]);e.complete()}));if(d(e))return n=e,new N((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,y)}));if(B(e))return R(e);if(F(e))return t=e,new N((function(e){var n,i;try{for(var r=o(t),s=r.next();!s.done;s=r.next()){var a=s.value;if(e.next(a),e.closed)return}}catch(e){n={error:e}}finally{try{s&&!s.done&&(i=r.return)&&i.call(r)}finally{if(n)throw n.error}}e.complete()}));if(U(e))return R(q(e))}var t,n,i,r;throw H(e)}function R(e){return new N((function(t){(function(e,t){var n,i,s,a,c,l,u,d;return c=this,l=void 0,d=function(){var c,l;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),n=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=o(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(n){t[n]=e[n]&&function(t){return new Promise((function(i,r){!function(e,t,n,i){Promise.resolve(i).then((function(t){e({value:t,done:n})}),t)}(i,r,(t=e[n](t)).done,t.value)}))}}}(e),r.label=1;case 1:return[4,n.next()];case 2:if((i=r.sent()).done)return[3,4];if(c=i.value,t.next(c),t.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=r.sent(),s={error:l},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(a=n.return)?[4,a.call(n)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((u=void 0)||(u=Promise))((function(e,t){function n(e){try{r(d.next(e))}catch(e){t(e)}}function i(e){try{r(d.throw(e))}catch(e){t(e)}}function r(t){var r;t.done?e(t.value):(r=t.value,r instanceof u?r:new u((function(e){e(r)}))).then(n,i)}r((d=d.apply(c,l||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function K(e){return function(t){if(function(e){return u(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function V(e,t,n,i,r){return new Y(e,t,n,i,r)}var Y=function(e){function t(t,n,i,r,o,s){var a=e.call(this,t)||this;return a.onFinalize=o,a.shouldUnsubscribe=s,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=r?function(e){try{r(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=i?function(){try{i()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return i(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(T);function Q(e,t){return K((function(n,i){var r=0;n.subscribe(V(i,(function(n){i.next(e.call(t,n,r++))})))}))}function X(e,t,n,i,r){void 0===i&&(i=0),void 0===r&&(r=!1);var o=t.schedule((function(){n(),r?e.add(this.schedule(null,i)):this.unsubscribe()}),i);if(e.add(o),!r)return o}function G(e,t,n){return void 0===n&&(n=1/0),u(t)?G((function(n,i){return Q((function(e,r){return t(n,e,i,r)}))(W(e(n,i)))}),n):("number"==typeof t&&(n=t),K((function(t,i){return function(e,t,n,i,r,o,s,a){var c=[],l=0,u=0,d=!1,h=function(){!d||c.length||l||t.complete()},f=function(e){return l<i?p(e):c.push(e)},p=function(e){l++;var r=!1;W(n(e,u++)).subscribe(V(t,(function(e){t.next(e)}),(function(){r=!0}),void 0,(function(){if(r)try{l--;for(;c.length&&l<i;)e=void 0,e=c.shift(),p(e);h()}catch(e){t.error(e)}var e})))};return e.subscribe(V(t,f,(function(){d=!0,h()}))),function(){}}(t,i,e,n)})))}var Z=Array.isArray;function J(e){return Q((function(t){return function(e,t){return Z(t)?e.apply(void 0,a([],s(t))):e(t)}(e,t)}))}var ee=["addListener","removeListener"],te=["addEventListener","removeEventListener"],ne=["on","off"];function ie(e,t,n,i){if(u(n)&&(i=n,n=void 0),i)return ie(e,t,n).pipe(J(i));var r=s(function(e){return u(e.addEventListener)&&u(e.removeEventListener)}(e)?te.map((function(i){return function(r){return e[i](t,r,n)}})):function(e){return u(e.addListener)&&u(e.removeListener)}(e)?ee.map(re(e,t)):function(e){return u(e.on)&&u(e.off)}(e)?ne.map(re(e,t)):[],2),o=r[0],a=r[1];if(!o&&l(e))return G((function(e){return ie(e,t,n)}))(W(e));if(!o)throw new TypeError("Invalid event target");return new N((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return o(t),function(){return a(t)}}))}function re(e,t){return function(n){return function(i){return e[n](t,i)}}}var oe=function(e){function t(t,n){return e.call(this)||this}return i(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(m),se={setInterval:function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var r=se.delegate;return(null==r?void 0:r.setInterval)?r.setInterval.apply(r,a([e,t],s(n))):setInterval.apply(void 0,a([e,t],s(n)))},clearInterval:function(e){var t=se.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},ae=function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.scheduler=t,i.work=n,i.pending=!1,i}return i(t,e),t.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var i=this.id,r=this.scheduler;return null!=i&&(this.id=this.recycleAsyncId(r,i,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),se.setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&se.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n,i=!1;try{this.work(e)}catch(e){i=!0,n=e||new Error("Scheduled action threw falsy error")}if(i)return this.unsubscribe(),n},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,i=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(i,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(oe),ce={now:function(){return(ce.delegate||Date).now()},delegate:void 0},le=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=ce.now,e}(),ue=new(function(e){function t(t,n){void 0===n&&(n=le.now);var i=e.call(this,t,n)||this;return i.actions=[],i._active=!1,i}return i(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(le))(ae),de=ue;function he(e,t){return void 0===t&&(t=ue),K((function(n,i){var r=null,o=null,s=null,a=function(){if(r){r.unsubscribe(),r=null;var e=o;o=null,i.next(e)}};function c(){var n=s+e,o=t.now();if(o<n)return r=this.schedule(void 0,n-o),void i.add(r);a()}n.subscribe(V(i,(function(n){o=n,s=t.now(),r||(r=t.schedule(c,e),i.add(r))}),(function(){a(),i.complete()}),void 0,(function(){o=r=null})))}))}var fe=Array.isArray,pe=Object.getPrototypeOf,me=Object.prototype,ge=Object.keys;function ve(e,t){return void 0===t&&(t=0),K((function(n,i){n.subscribe(V(i,(function(n){return X(i,e,(function(){return i.next(n)}),t)}),(function(){return X(i,e,(function(){return i.complete()}),t)}),(function(n){return X(i,e,(function(){return i.error(n)}),t)})))}))}function _e(e,t){return void 0===t&&(t=0),K((function(n,i){i.add(e.schedule((function(){return n.subscribe(i)}),t))}))}function be(e,t){if(!e)throw new Error("Iterable cannot be null");return new N((function(n){X(n,t,(function(){var i=e[Symbol.asyncIterator]();X(n,t,(function(){i.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function ye(e,t){return t?function(e,t){if(null!=e){if($(e))return function(e,t){return W(e).pipe(_e(t),ve(t))}(e,t);if(l(e))return function(e,t){return new N((function(n){var i=0;return t.schedule((function(){i===e.length?n.complete():(n.next(e[i++]),n.closed||this.schedule())}))}))}(e,t);if(d(e))return function(e,t){return W(e).pipe(_e(t),ve(t))}(e,t);if(B(e))return be(e,t);if(F(e))return function(e,t){return new N((function(n){var i;return X(n,t,(function(){i=e[z](),X(n,t,(function(){var e,t,r;try{t=(e=i.next()).value,r=e.done}catch(e){return void n.error(e)}r?n.complete():n.next(t)}),0,!0)})),function(){return u(null==i?void 0:i.return)&&i.return()}}))}(e,t);if(U(e))return function(e,t){return be(q(e),t)}(e,t)}throw H(e)}(e,t):W(e)}function we(e){return e&&u(e.schedule)}function Ee(e){return e[e.length-1]}function ke(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return we(Ee(e))?e.pop():void 0}(e),i=function(e){return u(Ee(e))?e.pop():void 0}(e),r=function(e){if(1===e.length){var t=e[0];if(fe(t))return{args:t,keys:null};if((i=t)&&"object"==typeof i&&pe(i)===me){var n=ge(t);return{args:n.map((function(e){return t[e]})),keys:n}}}var i;return{args:e,keys:null}}(e),o=r.args,s=r.keys;if(0===o.length)return ye([],n);var a=new N(function(e,t,n){return void 0===n&&(n=P),function(i){xe(t,(function(){for(var r=e.length,o=new Array(r),s=r,a=r,c=function(r){xe(t,(function(){var c=ye(e[r],t),l=!1;c.subscribe(V(i,(function(e){o[r]=e,l||(l=!0,a--),a||i.next(n(o.slice()))}),(function(){--s||i.complete()})))}),i)},l=0;l<r;l++)c(l)}),i)}}(o,n,s?function(e){return function(e,t){return e.reduce((function(e,n,i){return e[n]=t[i],e}),{})}(s,e)}:P));return i?a.pipe(J(i)):a}function xe(e,t,n){e?X(n,e,t):t()}function Te(e){return K((function(t,n){var i,r=null,o=!1;r=t.subscribe(V(n,void 0,void 0,(function(s){i=W(e(s,Te(e)(t))),r?(r.unsubscribe(),r=null,i.subscribe(n)):o=!0}))),o&&(r.unsubscribe(),r=null,i.subscribe(n))}))}var Ae=new N((function(e){return e.complete()})),Se="top",Ce="bottom",Oe="right",Ie="left",Le="auto",je=[Se,Ce,Oe,Ie],Me="start",Pe="end",Ne="clippingParents",De="viewport",$e="popper",Be="reference",He=je.reduce((function(e,t){return e.concat([t+"-"+Me,t+"-"+Pe])}),[]),ze=[].concat(je,[Le]).reduce((function(e,t){return e.concat([t,t+"-"+Me,t+"-"+Pe])}),[]),Fe="beforeRead",qe="read",Ue="afterRead",We="beforeMain",Re="main",Ke="afterMain",Ve="beforeWrite",Ye="write",Qe="afterWrite",Xe=[Fe,qe,Ue,We,Re,Ke,Ve,Ye,Qe];function Ge(e){return e?(e.nodeName||"").toLowerCase():null}function Ze(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function Je(e){return e instanceof Ze(e).Element||e instanceof Element}function et(e){return e instanceof Ze(e).HTMLElement||e instanceof HTMLElement}function tt(e){return"undefined"!=typeof ShadowRoot&&(e instanceof Ze(e).ShadowRoot||e instanceof ShadowRoot)}const nt={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},r=t.elements[e];et(r)&&Ge(r)&&(Object.assign(r.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],r=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});et(i)&&Ge(i)&&(Object.assign(i.style,o),Object.keys(r).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]};function it(e){return e.split("-")[0]}var rt=Math.max,ot=Math.min,st=Math.round;function at(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function ct(){return!/^((?!chrome|android).)*safari/i.test(at())}function lt(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var i=e.getBoundingClientRect(),r=1,o=1;t&&et(e)&&(r=e.offsetWidth>0&&st(i.width)/e.offsetWidth||1,o=e.offsetHeight>0&&st(i.height)/e.offsetHeight||1);var s=(Je(e)?Ze(e):window).visualViewport,a=!ct()&&n,c=(i.left+(a&&s?s.offsetLeft:0))/r,l=(i.top+(a&&s?s.offsetTop:0))/o,u=i.width/r,d=i.height/o;return{width:u,height:d,top:l,right:c+u,bottom:l+d,left:c,x:c,y:l}}function ut(e){var t=lt(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function dt(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&tt(n)){var i=t;do{if(i&&e.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function ht(e){return Ze(e).getComputedStyle(e)}function ft(e){return["table","td","th"].indexOf(Ge(e))>=0}function pt(e){return((Je(e)?e.ownerDocument:e.document)||window.document).documentElement}function mt(e){return"html"===Ge(e)?e:e.assignedSlot||e.parentNode||(tt(e)?e.host:null)||pt(e)}function gt(e){return et(e)&&"fixed"!==ht(e).position?e.offsetParent:null}function vt(e){for(var t=Ze(e),n=gt(e);n&&ft(n)&&"static"===ht(n).position;)n=gt(n);return n&&("html"===Ge(n)||"body"===Ge(n)&&"static"===ht(n).position)?t:n||function(e){var t=/firefox/i.test(at());if(/Trident/i.test(at())&&et(e)&&"fixed"===ht(e).position)return null;var n=mt(e);for(tt(n)&&(n=n.host);et(n)&&["html","body"].indexOf(Ge(n))<0;){var i=ht(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}function _t(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function bt(e,t,n){return rt(e,ot(t,n))}function yt(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function wt(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}const Et={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,r=e.options,o=n.elements.arrow,s=n.modifiersData.popperOffsets,a=it(n.placement),c=_t(a),l=[Ie,Oe].indexOf(a)>=0?"height":"width";if(o&&s){var u=function(e,t){return yt("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:wt(e,je))}(r.padding,n),d=ut(o),h="y"===c?Se:Ie,f="y"===c?Ce:Oe,p=n.rects.reference[l]+n.rects.reference[c]-s[c]-n.rects.popper[l],m=s[c]-n.rects.reference[c],g=vt(o),v=g?"y"===c?g.clientHeight||0:g.clientWidth||0:0,_=p/2-m/2,b=u[h],y=v-d[l]-u[f],w=v/2-d[l]/2+_,E=bt(b,w,y),k=c;n.modifiersData[i]=((t={})[k]=E,t.centerOffset=E-w,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&dt(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function kt(e){return e.split("-")[1]}var xt={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Tt(e){var t,n=e.popper,i=e.popperRect,r=e.placement,o=e.variation,s=e.offsets,a=e.position,c=e.gpuAcceleration,l=e.adaptive,u=e.roundOffsets,d=e.isFixed,h=s.x,f=void 0===h?0:h,p=s.y,m=void 0===p?0:p,g="function"==typeof u?u({x:f,y:m}):{x:f,y:m};f=g.x,m=g.y;var v=s.hasOwnProperty("x"),_=s.hasOwnProperty("y"),b=Ie,y=Se,w=window;if(l){var E=vt(n),k="clientHeight",x="clientWidth";E===Ze(n)&&"static"!==ht(E=pt(n)).position&&"absolute"===a&&(k="scrollHeight",x="scrollWidth"),(r===Se||(r===Ie||r===Oe)&&o===Pe)&&(y=Ce,m-=(d&&E===w&&w.visualViewport?w.visualViewport.height:E[k])-i.height,m*=c?1:-1),r!==Ie&&(r!==Se&&r!==Ce||o!==Pe)||(b=Oe,f-=(d&&E===w&&w.visualViewport?w.visualViewport.width:E[x])-i.width,f*=c?1:-1)}var T,A=Object.assign({position:a},l&&xt),S=!0===u?function(e,t){var n=e.x,i=e.y,r=t.devicePixelRatio||1;return{x:st(n*r)/r||0,y:st(i*r)/r||0}}({x:f,y:m},Ze(n)):{x:f,y:m};return f=S.x,m=S.y,c?Object.assign({},A,((T={})[y]=_?"0":"",T[b]=v?"0":"",T.transform=(w.devicePixelRatio||1)<=1?"translate("+f+"px, "+m+"px)":"translate3d("+f+"px, "+m+"px, 0)",T)):Object.assign({},A,((t={})[y]=_?m+"px":"",t[b]=v?f+"px":"",t.transform="",t))}const At={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,r=void 0===i||i,o=n.adaptive,s=void 0===o||o,a=n.roundOffsets,c=void 0===a||a,l={placement:it(t.placement),variation:kt(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Tt(Object.assign({},l,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:c})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Tt(Object.assign({},l,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var St={passive:!0};const Ct={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,r=i.scroll,o=void 0===r||r,s=i.resize,a=void 0===s||s,c=Ze(t.elements.popper),l=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&l.forEach((function(e){e.addEventListener("scroll",n.update,St)})),a&&c.addEventListener("resize",n.update,St),function(){o&&l.forEach((function(e){e.removeEventListener("scroll",n.update,St)})),a&&c.removeEventListener("resize",n.update,St)}},data:{}};var Ot={left:"right",right:"left",bottom:"top",top:"bottom"};function It(e){return e.replace(/left|right|bottom|top/g,(function(e){return Ot[e]}))}var Lt={start:"end",end:"start"};function jt(e){return e.replace(/start|end/g,(function(e){return Lt[e]}))}function Mt(e){var t=Ze(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function Pt(e){return lt(pt(e)).left+Mt(e).scrollLeft}function Nt(e){var t=ht(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+i)}function Dt(e){return["html","body","#document"].indexOf(Ge(e))>=0?e.ownerDocument.body:et(e)&&Nt(e)?e:Dt(mt(e))}function $t(e,t){var n;void 0===t&&(t=[]);var i=Dt(e),r=i===(null==(n=e.ownerDocument)?void 0:n.body),o=Ze(i),s=r?[o].concat(o.visualViewport||[],Nt(i)?i:[]):i,a=t.concat(s);return r?a:a.concat($t(mt(s)))}function Bt(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Ht(e,t,n){return t===De?Bt(function(e,t){var n=Ze(e),i=pt(e),r=n.visualViewport,o=i.clientWidth,s=i.clientHeight,a=0,c=0;if(r){o=r.width,s=r.height;var l=ct();(l||!l&&"fixed"===t)&&(a=r.offsetLeft,c=r.offsetTop)}return{width:o,height:s,x:a+Pt(e),y:c}}(e,n)):Je(t)?function(e,t){var n=lt(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):Bt(function(e){var t,n=pt(e),i=Mt(e),r=null==(t=e.ownerDocument)?void 0:t.body,o=rt(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),s=rt(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),a=-i.scrollLeft+Pt(e),c=-i.scrollTop;return"rtl"===ht(r||n).direction&&(a+=rt(n.clientWidth,r?r.clientWidth:0)-o),{width:o,height:s,x:a,y:c}}(pt(e)))}function zt(e){var t,n=e.reference,i=e.element,r=e.placement,o=r?it(r):null,s=r?kt(r):null,a=n.x+n.width/2-i.width/2,c=n.y+n.height/2-i.height/2;switch(o){case Se:t={x:a,y:n.y-i.height};break;case Ce:t={x:a,y:n.y+n.height};break;case Oe:t={x:n.x+n.width,y:c};break;case Ie:t={x:n.x-i.width,y:c};break;default:t={x:n.x,y:n.y}}var l=o?_t(o):null;if(null!=l){var u="y"===l?"height":"width";switch(s){case Me:t[l]=t[l]-(n[u]/2-i[u]/2);break;case Pe:t[l]=t[l]+(n[u]/2-i[u]/2)}}return t}function Ft(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=void 0===i?e.placement:i,o=n.strategy,s=void 0===o?e.strategy:o,a=n.boundary,c=void 0===a?Ne:a,l=n.rootBoundary,u=void 0===l?De:l,d=n.elementContext,h=void 0===d?$e:d,f=n.altBoundary,p=void 0!==f&&f,m=n.padding,g=void 0===m?0:m,v=yt("number"!=typeof g?g:wt(g,je)),_=h===$e?Be:$e,b=e.rects.popper,y=e.elements[p?_:h],w=function(e,t,n,i){var r="clippingParents"===t?function(e){var t=$t(mt(e)),n=["absolute","fixed"].indexOf(ht(e).position)>=0&&et(e)?vt(e):e;return Je(n)?t.filter((function(e){return Je(e)&&dt(e,n)&&"body"!==Ge(e)})):[]}(e):[].concat(t),o=[].concat(r,[n]),s=o[0],a=o.reduce((function(t,n){var r=Ht(e,n,i);return t.top=rt(r.top,t.top),t.right=ot(r.right,t.right),t.bottom=ot(r.bottom,t.bottom),t.left=rt(r.left,t.left),t}),Ht(e,s,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(Je(y)?y:y.contextElement||pt(e.elements.popper),c,u,s),E=lt(e.elements.reference),k=zt({reference:E,element:b,strategy:"absolute",placement:r}),x=Bt(Object.assign({},b,k)),T=h===$e?x:E,A={top:w.top-T.top+v.top,bottom:T.bottom-w.bottom+v.bottom,left:w.left-T.left+v.left,right:T.right-w.right+v.right},S=e.modifiersData.offset;if(h===$e&&S){var C=S[r];Object.keys(A).forEach((function(e){var t=[Oe,Ce].indexOf(e)>=0?1:-1,n=[Se,Ce].indexOf(e)>=0?"y":"x";A[e]+=C[n]*t}))}return A}const qt={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name;if(!t.modifiersData[i]._skip){for(var r=n.mainAxis,o=void 0===r||r,s=n.altAxis,a=void 0===s||s,c=n.fallbackPlacements,l=n.padding,u=n.boundary,d=n.rootBoundary,h=n.altBoundary,f=n.flipVariations,p=void 0===f||f,m=n.allowedAutoPlacements,g=t.options.placement,v=it(g),_=c||(v!==g&&p?function(e){if(it(e)===Le)return[];var t=It(e);return[jt(e),t,jt(t)]}(g):[It(g)]),b=[g].concat(_).reduce((function(e,n){return e.concat(it(n)===Le?function(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=n.boundary,o=n.rootBoundary,s=n.padding,a=n.flipVariations,c=n.allowedAutoPlacements,l=void 0===c?ze:c,u=kt(i),d=u?a?He:He.filter((function(e){return kt(e)===u})):je,h=d.filter((function(e){return l.indexOf(e)>=0}));0===h.length&&(h=d);var f=h.reduce((function(t,n){return t[n]=Ft(e,{placement:n,boundary:r,rootBoundary:o,padding:s})[it(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:n,boundary:u,rootBoundary:d,padding:l,flipVariations:p,allowedAutoPlacements:m}):n)}),[]),y=t.rects.reference,w=t.rects.popper,E=new Map,k=!0,x=b[0],T=0;T<b.length;T++){var A=b[T],S=it(A),C=kt(A)===Me,O=[Se,Ce].indexOf(S)>=0,I=O?"width":"height",L=Ft(t,{placement:A,boundary:u,rootBoundary:d,altBoundary:h,padding:l}),j=O?C?Oe:Ie:C?Ce:Se;y[I]>w[I]&&(j=It(j));var M=It(j),P=[];if(o&&P.push(L[S]<=0),a&&P.push(L[j]<=0,L[M]<=0),P.every((function(e){return e}))){x=A,k=!1;break}E.set(A,P)}if(k)for(var N=function(e){var t=b.find((function(t){var n=E.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return x=t,"break"},D=p?3:1;D>0&&"break"!==N(D);D--);t.placement!==x&&(t.modifiersData[i]._skip=!0,t.placement=x,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function Ut(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function Wt(e){return[Se,Oe,Ce,Ie].some((function(t){return e[t]>=0}))}const Rt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,r=t.rects.popper,o=t.modifiersData.preventOverflow,s=Ft(t,{elementContext:"reference"}),a=Ft(t,{altBoundary:!0}),c=Ut(s,i),l=Ut(a,r,o),u=Wt(c),d=Wt(l);t.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:l,isReferenceHidden:u,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":d})}},Kt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.offset,o=void 0===r?[0,0]:r,s=ze.reduce((function(e,n){return e[n]=function(e,t,n){var i=it(e),r=[Ie,Se].indexOf(i)>=0?-1:1,o="function"==typeof n?n(Object.assign({},t,{placement:e})):n,s=o[0],a=o[1];return s=s||0,a=(a||0)*r,[Ie,Oe].indexOf(i)>=0?{x:a,y:s}:{x:s,y:a}}(n,t.rects,o),e}),{}),a=s[t.placement],c=a.x,l=a.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=c,t.modifiersData.popperOffsets.y+=l),t.modifiersData[i]=s}},Vt={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=zt({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},Yt={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.mainAxis,o=void 0===r||r,s=n.altAxis,a=void 0!==s&&s,c=n.boundary,l=n.rootBoundary,u=n.altBoundary,d=n.padding,h=n.tether,f=void 0===h||h,p=n.tetherOffset,m=void 0===p?0:p,g=Ft(t,{boundary:c,rootBoundary:l,padding:d,altBoundary:u}),v=it(t.placement),_=kt(t.placement),b=!_,y=_t(v),w="x"===y?"y":"x",E=t.modifiersData.popperOffsets,k=t.rects.reference,x=t.rects.popper,T="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,A="number"==typeof T?{mainAxis:T,altAxis:T}:Object.assign({mainAxis:0,altAxis:0},T),S=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,C={x:0,y:0};if(E){if(o){var O,I="y"===y?Se:Ie,L="y"===y?Ce:Oe,j="y"===y?"height":"width",M=E[y],P=M+g[I],N=M-g[L],D=f?-x[j]/2:0,$=_===Me?k[j]:x[j],B=_===Me?-x[j]:-k[j],H=t.elements.arrow,z=f&&H?ut(H):{width:0,height:0},F=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},q=F[I],U=F[L],W=bt(0,k[j],z[j]),R=b?k[j]/2-D-W-q-A.mainAxis:$-W-q-A.mainAxis,K=b?-k[j]/2+D+W+U+A.mainAxis:B+W+U+A.mainAxis,V=t.elements.arrow&&vt(t.elements.arrow),Y=V?"y"===y?V.clientTop||0:V.clientLeft||0:0,Q=null!=(O=null==S?void 0:S[y])?O:0,X=M+K-Q,G=bt(f?ot(P,M+R-Q-Y):P,M,f?rt(N,X):N);E[y]=G,C[y]=G-M}if(a){var Z,J="x"===y?Se:Ie,ee="x"===y?Ce:Oe,te=E[w],ne="y"===w?"height":"width",ie=te+g[J],re=te-g[ee],oe=-1!==[Se,Ie].indexOf(v),se=null!=(Z=null==S?void 0:S[w])?Z:0,ae=oe?ie:te-k[ne]-x[ne]-se+A.altAxis,ce=oe?te+k[ne]+x[ne]-se-A.altAxis:re,le=f&&oe?function(e,t,n){var i=bt(e,t,n);return i>n?n:i}(ae,te,ce):bt(f?ae:ie,te,f?ce:re);E[w]=le,C[w]=le-te}t.modifiersData[i]=C}},requiresIfExists:["offset"]};function Qt(e,t,n){void 0===n&&(n=!1);var i,r,o=et(t),s=et(t)&&function(e){var t=e.getBoundingClientRect(),n=st(t.width)/e.offsetWidth||1,i=st(t.height)/e.offsetHeight||1;return 1!==n||1!==i}(t),a=pt(t),c=lt(e,s,n),l={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(o||!o&&!n)&&(("body"!==Ge(t)||Nt(a))&&(l=(i=t)!==Ze(i)&&et(i)?{scrollLeft:(r=i).scrollLeft,scrollTop:r.scrollTop}:Mt(i)),et(t)?((u=lt(t,!0)).x+=t.clientLeft,u.y+=t.clientTop):a&&(u.x=Pt(a))),{x:c.left+l.scrollLeft-u.x,y:c.top+l.scrollTop-u.y,width:c.width,height:c.height}}function Xt(e){var t=new Map,n=new Set,i=[];function r(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&r(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||r(e)})),i}var Gt={placement:"bottom",modifiers:[],strategy:"absolute"};function Zt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Jt(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,i=void 0===n?[]:n,r=t.defaultOptions,o=void 0===r?Gt:r;return function(e,t,n){void 0===n&&(n=o);var r,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Gt,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],l=!1,u={state:a,setOptions:function(n){var r="function"==typeof n?n(a.options):n;d(),a.options=Object.assign({},o,a.options,r),a.scrollParents={reference:Je(e)?$t(e):e.contextElement?$t(e.contextElement):[],popper:$t(t)};var s,l,h=function(e){var t=Xt(e);return Xe.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((s=[].concat(i,a.options.modifiers),l=s.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(l).map((function(e){return l[e]}))));return a.orderedModifiers=h.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,r=e.effect;if("function"==typeof r){var o=r({state:a,name:t,instance:u,options:i});c.push(o||function(){})}})),u.update()},forceUpdate:function(){if(!l){var e=a.elements,t=e.reference,n=e.popper;if(Zt(t,n)){a.rects={reference:Qt(t,vt(n),"fixed"===a.options.strategy),popper:ut(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var r=a.orderedModifiers[i],o=r.fn,s=r.options,c=void 0===s?{}:s,d=r.name;"function"==typeof o&&(a=o({state:a,options:c,name:d,instance:u})||a)}else a.reset=!1,i=-1}}},update:(r=function(){return new Promise((function(e){u.forceUpdate(),e(a)}))},function(){return s||(s=new Promise((function(e){Promise.resolve().then((function(){s=void 0,e(r())}))}))),s}),destroy:function(){d(),l=!0}};if(!Zt(e,t))return u;function d(){c.forEach((function(e){return e()})),c=[]}return u.setOptions(n).then((function(e){!l&&n.onFirstUpdate&&n.onFirstUpdate(e)})),u}}var en=Jt(),tn=Jt({defaultModifiers:[Ct,Vt,At,nt,Kt,qt,Yt,Et,Rt]}),nn=Jt({defaultModifiers:[Ct,Vt,At,nt]});const rn=new Map,on={set(e,t,n){rn.has(e)||rn.set(e,new Map);const i=rn.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(e,t)=>rn.has(e)&&rn.get(e).get(t)||null,remove(e,t){if(!rn.has(e))return;const n=rn.get(e);n.delete(t),0===n.size&&rn.delete(e)}},sn="transitionend",an=e=>(e&&window.CSS&&window.CSS.escape&&(e=e.replace(/#([^\s"#']+)/g,((e,t)=>`#${CSS.escape(t)}`))),e),cn=e=>{e.dispatchEvent(new Event(sn))},ln=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),un=e=>ln(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(an(e)):null,dn=e=>{if(!ln(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(!n)return t;if(n!==e){const t=e.closest("summary");if(t&&t.parentNode!==n)return!1;if(null===t)return!1}return t},hn=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),fn=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?fn(e.parentNode):null},pn=()=>{},mn=e=>{e.offsetHeight},gn=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,vn=[],_n=()=>"rtl"===document.documentElement.dir,bn=e=>{var t;t=()=>{const t=gn();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}},"loading"===document.readyState?(vn.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of vn)e()})),vn.push(t)):t()},yn=(e,t=[],n=e)=>"function"==typeof e?e(...t):n,wn=(e,t,n=!0)=>{if(!n)return void yn(e);const i=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),r=Number.parseFloat(n);return i||r?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0})(t)+5;let r=!1;const o=({target:n})=>{n===t&&(r=!0,t.removeEventListener(sn,o),yn(e))};t.addEventListener(sn,o),setTimeout((()=>{r||cn(t)}),i)},En=(e,t,n,i)=>{const r=e.length;let o=e.indexOf(t);return-1===o?!n&&i?e[r-1]:e[0]:(o+=n?1:-1,i&&(o=(o+r)%r),e[Math.max(0,Math.min(o,r-1))])},kn=/[^.]*(?=\..*)\.|.*/,xn=/\..*/,Tn=/::\d+$/,An={};let Sn=1;const Cn={mouseenter:"mouseover",mouseleave:"mouseout"},On=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function In(e,t){return t&&`${t}::${Sn++}`||e.uidEvent||Sn++}function Ln(e){const t=In(e);return e.uidEvent=t,An[t]=An[t]||{},An[t]}function jn(e,t,n=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===n))}function Mn(e,t,n){const i="string"==typeof t,r=i?n:t||n;let o=$n(e);return On.has(o)||(o=e),[i,r,o]}function Pn(e,t,n,i,r){if("string"!=typeof t||!e)return;let[o,s,a]=Mn(t,n,i);if(t in Cn){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};s=e(s)}const c=Ln(e),l=c[a]||(c[a]={}),u=jn(l,s,o?n:null);if(u)return void(u.oneOff=u.oneOff&&r);const d=In(s,t.replace(kn,"")),h=o?function(e,t,n){return function i(r){const o=e.querySelectorAll(t);for(let{target:s}=r;s&&s!==this;s=s.parentNode)for(const a of o)if(a===s)return Hn(r,{delegateTarget:s}),i.oneOff&&Bn.off(e,r.type,t,n),n.apply(s,[r])}}(e,n,s):function(e,t){return function n(i){return Hn(i,{delegateTarget:e}),n.oneOff&&Bn.off(e,i.type,t),t.apply(e,[i])}}(e,s);h.delegationSelector=o?n:null,h.callable=s,h.oneOff=r,h.uidEvent=d,l[d]=h,e.addEventListener(a,h,o)}function Nn(e,t,n,i,r){const o=jn(t[n],i,r);o&&(e.removeEventListener(n,o,Boolean(r)),delete t[n][o.uidEvent])}function Dn(e,t,n,i){const r=t[n]||{};for(const[o,s]of Object.entries(r))o.includes(i)&&Nn(e,t,n,s.callable,s.delegationSelector)}function $n(e){return e=e.replace(xn,""),Cn[e]||e}const Bn={on(e,t,n,i){Pn(e,t,n,i,!1)},one(e,t,n,i){Pn(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[r,o,s]=Mn(t,n,i),a=s!==t,c=Ln(e),l=c[s]||{},u=t.startsWith(".");if(void 0===o){if(u)for(const n of Object.keys(c))Dn(e,c,n,t.slice(1));for(const[n,i]of Object.entries(l)){const r=n.replace(Tn,"");a&&!t.includes(r)||Nn(e,c,s,i.callable,i.delegationSelector)}}else{if(!Object.keys(l).length)return;Nn(e,c,s,o,r?n:null)}},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=gn();let r=null,o=!0,s=!0,a=!1;t!==$n(t)&&i&&(r=i.Event(t,n),i(e).trigger(r),o=!r.isPropagationStopped(),s=!r.isImmediatePropagationStopped(),a=r.isDefaultPrevented());const c=Hn(new Event(t,{bubbles:o,cancelable:!0}),n);return a&&c.preventDefault(),s&&e.dispatchEvent(c),c.defaultPrevented&&r&&r.preventDefault(),c}};function Hn(e,t={}){for(const[n,i]of Object.entries(t))try{e[n]=i}catch(t){Object.defineProperty(e,n,{configurable:!0,get:()=>i})}return e}function zn(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function Fn(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const qn={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${Fn(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${Fn(t)}`)},getDataAttributes(e){if(!e)return{};const t={},n=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=zn(e.dataset[i])}return t},getDataAttribute:(e,t)=>zn(e.getAttribute(`data-bs-${Fn(t)}`))};class Un{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const n=ln(t)?qn.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...ln(t)?qn.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const[i,r]of Object.entries(t)){const t=e[i],o=ln(t)?"element":null==(n=t)?`${n}`:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(r).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${o}" but expected type "${r}".`)}var n}}class Wn extends Un{constructor(e,t){super(),(e=un(e))&&(this._element=e,this._config=this._getConfig(t),on.set(this._element,this.constructor.DATA_KEY,this))}dispose(){on.remove(this._element,this.constructor.DATA_KEY),Bn.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,n=!0){wn(e,t,n)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return on.get(un(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.3.1"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const Rn=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?n.trim():null}return an(t)},Kn={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const n=[];let i=e.parentNode.closest(t);for(;i;)n.push(i),i=i.parentNode.closest(t);return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!hn(e)&&dn(e)))},getSelectorFromElement(e){const t=Rn(e);return t&&Kn.findOne(t)?t:null},getElementFromSelector(e){const t=Rn(e);return t?Kn.findOne(t):null},getMultipleElementsFromSelector(e){const t=Rn(e);return t?Kn.find(t):[]}},Vn=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,i=e.NAME;Bn.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),hn(this))return;const r=Kn.getElementFromSelector(this)||this.closest(`.${i}`);e.getOrCreateInstance(r)[t]()}))},Yn=".bs.alert",Qn=`close${Yn}`,Xn=`closed${Yn}`;class Gn extends Wn{static get NAME(){return"alert"}close(){if(Bn.trigger(this._element,Qn).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),Bn.trigger(this._element,Xn),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=Gn.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Vn(Gn,"close"),bn(Gn);const Zn='[data-bs-toggle="button"]';class Jn extends Wn{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=Jn.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}Bn.on(document,"click.bs.button.data-api",Zn,(e=>{e.preventDefault();const t=e.target.closest(Zn);Jn.getOrCreateInstance(t).toggle()})),bn(Jn);const ei=".bs.swipe",ti=`touchstart${ei}`,ni=`touchmove${ei}`,ii=`touchend${ei}`,ri=`pointerdown${ei}`,oi=`pointerup${ei}`,si={endCallback:null,leftCallback:null,rightCallback:null},ai={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class ci extends Un{constructor(e,t){super(),this._element=e,e&&ci.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return si}static get DefaultType(){return ai}static get NAME(){return"swipe"}dispose(){Bn.off(this._element,ei)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),yn(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&yn(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(Bn.on(this._element,ri,(e=>this._start(e))),Bn.on(this._element,oi,(e=>this._end(e))),this._element.classList.add("pointer-event")):(Bn.on(this._element,ti,(e=>this._start(e))),Bn.on(this._element,ni,(e=>this._move(e))),Bn.on(this._element,ii,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const li=".bs.carousel",ui=".data-api",di="next",hi="prev",fi="left",pi="right",mi=`slide${li}`,gi=`slid${li}`,vi=`keydown${li}`,_i=`mouseenter${li}`,bi=`mouseleave${li}`,yi=`dragstart${li}`,wi=`load${li}${ui}`,Ei=`click${li}${ui}`,ki="carousel",xi="active",Ti=".active",Ai=".carousel-item",Si=Ti+Ai,Ci={ArrowLeft:pi,ArrowRight:fi},Oi={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Ii={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class Li extends Wn{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=Kn.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===ki&&this.cycle()}static get Default(){return Oi}static get DefaultType(){return Ii}static get NAME(){return"carousel"}next(){this._slide(di)}nextWhenVisible(){!document.hidden&&dn(this._element)&&this.next()}prev(){this._slide(hi)}pause(){this._isSliding&&cn(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?Bn.one(this._element,gi,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void Bn.one(this._element,gi,(()=>this.to(e)));const n=this._getItemIndex(this._getActive());if(n===e)return;const i=e>n?di:hi;this._slide(i,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&Bn.on(this._element,vi,(e=>this._keydown(e))),"hover"===this._config.pause&&(Bn.on(this._element,_i,(()=>this.pause())),Bn.on(this._element,bi,(()=>this._maybeEnableCycle()))),this._config.touch&&ci.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of Kn.find(".carousel-item img",this._element))Bn.on(e,yi,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(fi)),rightCallback:()=>this._slide(this._directionToOrder(pi)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new ci(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=Ci[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=Kn.findOne(Ti,this._indicatorsElement);t.classList.remove(xi),t.removeAttribute("aria-current");const n=Kn.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);n&&(n.classList.add(xi),n.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const n=this._getActive(),i=e===di,r=t||En(this._getItems(),n,i,this._config.wrap);if(r===n)return;const o=this._getItemIndex(r),s=t=>Bn.trigger(this._element,t,{relatedTarget:r,direction:this._orderToDirection(e),from:this._getItemIndex(n),to:o});if(s(mi).defaultPrevented)return;if(!n||!r)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=r;const c=i?"carousel-item-start":"carousel-item-end",l=i?"carousel-item-next":"carousel-item-prev";r.classList.add(l),mn(r),n.classList.add(c),r.classList.add(c),this._queueCallback((()=>{r.classList.remove(c,l),r.classList.add(xi),n.classList.remove(xi,l,c),this._isSliding=!1,s(gi)}),n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return Kn.findOne(Si,this._element)}_getItems(){return Kn.find(Ai,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return _n()?e===fi?hi:di:e===fi?di:hi}_orderToDirection(e){return _n()?e===hi?fi:pi:e===hi?pi:fi}static jQueryInterface(e){return this.each((function(){const t=Li.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}Bn.on(document,Ei,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=Kn.getElementFromSelector(this);if(!t||!t.classList.contains(ki))return;e.preventDefault();const n=Li.getOrCreateInstance(t),i=this.getAttribute("data-bs-slide-to");return i?(n.to(i),void n._maybeEnableCycle()):"next"===qn.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),Bn.on(window,wi,(()=>{const e=Kn.find('[data-bs-ride="carousel"]');for(const t of e)Li.getOrCreateInstance(t)})),bn(Li);const ji=".bs.collapse",Mi=`show${ji}`,Pi=`shown${ji}`,Ni=`hide${ji}`,Di=`hidden${ji}`,$i=`click${ji}.data-api`,Bi="show",Hi="collapse",zi="collapsing",Fi=`:scope .${Hi} .${Hi}`,qi='[data-bs-toggle="collapse"]',Ui={parent:null,toggle:!0},Wi={parent:"(null|element)",toggle:"boolean"};class Ri extends Wn{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const n=Kn.find(qi);for(const e of n){const t=Kn.getSelectorFromElement(e),n=Kn.find(t).filter((e=>e===this._element));null!==t&&n.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Ui}static get DefaultType(){return Wi}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>Ri.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(Bn.trigger(this._element,Mi).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(Hi),this._element.classList.add(zi),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(zi),this._element.classList.add(Hi,Bi),this._element.style[t]="",Bn.trigger(this._element,Pi)}),this._element,!0),this._element.style[t]=`${this._element[n]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(Bn.trigger(this._element,Ni).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,mn(this._element),this._element.classList.add(zi),this._element.classList.remove(Hi,Bi);for(const e of this._triggerArray){const t=Kn.getElementFromSelector(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(zi),this._element.classList.add(Hi),Bn.trigger(this._element,Di)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Bi)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=un(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(qi);for(const t of e){const e=Kn.getElementFromSelector(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=Kn.find(Fi,this._config.parent);return Kn.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const n of e)n.classList.toggle("collapsed",!t),n.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const n=Ri.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}Bn.on(document,$i,qi,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();for(const e of Kn.getMultipleElementsFromSelector(this))Ri.getOrCreateInstance(e,{toggle:!1}).toggle()})),bn(Ri);const Ki="dropdown",Vi=".bs.dropdown",Yi=".data-api",Qi="ArrowUp",Xi="ArrowDown",Gi=`hide${Vi}`,Zi=`hidden${Vi}`,Ji=`show${Vi}`,er=`shown${Vi}`,tr=`click${Vi}${Yi}`,nr=`keydown${Vi}${Yi}`,ir=`keyup${Vi}${Yi}`,rr="show",or='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',sr=`${or}.${rr}`,ar=".dropdown-menu",cr=_n()?"top-end":"top-start",lr=_n()?"top-start":"top-end",ur=_n()?"bottom-end":"bottom-start",dr=_n()?"bottom-start":"bottom-end",hr=_n()?"left-start":"right-start",fr=_n()?"right-start":"left-start",pr={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},mr={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class gr extends Wn{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=Kn.next(this._element,ar)[0]||Kn.prev(this._element,ar)[0]||Kn.findOne(ar,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return pr}static get DefaultType(){return mr}static get NAME(){return Ki}toggle(){return this._isShown()?this.hide():this.show()}show(){if(hn(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!Bn.trigger(this._element,Ji,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))Bn.on(e,"mouseover",pn);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(rr),this._element.classList.add(rr),Bn.trigger(this._element,er,e)}}hide(){if(hn(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!Bn.trigger(this._element,Gi,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))Bn.off(e,"mouseover",pn);this._popper&&this._popper.destroy(),this._menu.classList.remove(rr),this._element.classList.remove(rr),this._element.setAttribute("aria-expanded","false"),qn.removeDataAttribute(this._menu,"popper"),Bn.trigger(this._element,Zi,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!ln(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Ki.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:ln(this._config.reference)?e=un(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const n=this._getPopperConfig();this._popper=tn(e,this._menu,n)}_isShown(){return this._menu.classList.contains(rr)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return hr;if(e.classList.contains("dropstart"))return fr;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?lr:cr:t?dr:ur}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(qn.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...yn(this._config.popperConfig,[e])}}_selectMenuItem({key:e,target:t}){const n=Kn.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>dn(e)));n.length&&En(n,t,e===Xi,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=gr.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=Kn.find(sr);for(const n of t){const t=gr.getInstance(n);if(!t||!1===t._config.autoClose)continue;const i=e.composedPath(),r=i.includes(t._menu);if(i.includes(t._element)||"inside"===t._config.autoClose&&!r||"outside"===t._config.autoClose&&r)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const o={relatedTarget:t._element};"click"===e.type&&(o.clickEvent=e),t._completeHide(o)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),n="Escape"===e.key,i=[Qi,Xi].includes(e.key);if(!i&&!n)return;if(t&&!n)return;e.preventDefault();const r=this.matches(or)?this:Kn.prev(this,or)[0]||Kn.next(this,or)[0]||Kn.findOne(or,e.delegateTarget.parentNode),o=gr.getOrCreateInstance(r);if(i)return e.stopPropagation(),o.show(),void o._selectMenuItem(e);o._isShown()&&(e.stopPropagation(),o.hide(),r.focus())}}Bn.on(document,nr,or,gr.dataApiKeydownHandler),Bn.on(document,nr,ar,gr.dataApiKeydownHandler),Bn.on(document,tr,gr.clearMenus),Bn.on(document,ir,gr.clearMenus),Bn.on(document,tr,or,(function(e){e.preventDefault(),gr.getOrCreateInstance(this).toggle()})),bn(gr);const vr="backdrop",_r="show",br=`mousedown.bs.${vr}`,yr={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},wr={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Er extends Un{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return yr}static get DefaultType(){return wr}static get NAME(){return vr}show(e){if(!this._config.isVisible)return void yn(e);this._append();const t=this._getElement();this._config.isAnimated&&mn(t),t.classList.add(_r),this._emulateAnimation((()=>{yn(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(_r),this._emulateAnimation((()=>{this.dispose(),yn(e)}))):yn(e)}dispose(){this._isAppended&&(Bn.off(this._element,br),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=un(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),Bn.on(e,br,(()=>{yn(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){wn(e,this._getElement(),this._config.isAnimated)}}const kr=".bs.focustrap",xr=`focusin${kr}`,Tr=`keydown.tab${kr}`,Ar="backward",Sr={autofocus:!0,trapElement:null},Cr={autofocus:"boolean",trapElement:"element"};class Or extends Un{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Sr}static get DefaultType(){return Cr}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),Bn.off(document,kr),Bn.on(document,xr,(e=>this._handleFocusin(e))),Bn.on(document,Tr,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,Bn.off(document,kr))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const n=Kn.focusableChildren(t);0===n.length?t.focus():this._lastTabNavDirection===Ar?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Ar:"forward")}}const Ir=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Lr=".sticky-top",jr="padding-right",Mr="margin-right";class Pr{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,jr,(t=>t+e)),this._setElementAttributes(Ir,jr,(t=>t+e)),this._setElementAttributes(Lr,Mr,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,jr),this._resetElementAttributes(Ir,jr),this._resetElementAttributes(Lr,Mr)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const r=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${n(Number.parseFloat(r))}px`)}))}_saveInitialAttribute(e,t){const n=e.style.getPropertyValue(t);n&&qn.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const n=qn.getDataAttribute(e,t);null!==n?(qn.removeDataAttribute(e,t),e.style.setProperty(t,n)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(ln(e))t(e);else for(const n of Kn.find(e,this._element))t(n)}}const Nr=".bs.modal",Dr=`hide${Nr}`,$r=`hidePrevented${Nr}`,Br=`hidden${Nr}`,Hr=`show${Nr}`,zr=`shown${Nr}`,Fr=`resize${Nr}`,qr=`click.dismiss${Nr}`,Ur=`mousedown.dismiss${Nr}`,Wr=`keydown.dismiss${Nr}`,Rr=`click${Nr}.data-api`,Kr="modal-open",Vr="show",Yr="modal-static",Qr={backdrop:!0,focus:!0,keyboard:!0},Xr={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Gr extends Wn{constructor(e,t){super(e,t),this._dialog=Kn.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Pr,this._addEventListeners()}static get Default(){return Qr}static get DefaultType(){return Xr}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||Bn.trigger(this._element,Hr,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Kr),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){this._isShown&&!this._isTransitioning&&(Bn.trigger(this._element,Dr).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Vr),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){Bn.off(window,Nr),Bn.off(this._dialog,Nr),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Er({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Or({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=Kn.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),mn(this._element),this._element.classList.add(Vr),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,Bn.trigger(this._element,zr,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){Bn.on(this._element,Wr,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),Bn.on(window,Fr,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),Bn.on(this._element,Ur,(e=>{Bn.one(this._element,qr,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Kr),this._resetAdjustments(),this._scrollBar.reset(),Bn.trigger(this._element,Br)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(Bn.trigger(this._element,$r).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Yr)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Yr),this._queueCallback((()=>{this._element.classList.remove(Yr),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;if(n&&!e){const e=_n()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!n&&e){const e=_n()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=Gr.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}Bn.on(document,Rr,'[data-bs-toggle="modal"]',(function(e){const t=Kn.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),Bn.one(t,Hr,(e=>{e.defaultPrevented||Bn.one(t,Br,(()=>{dn(this)&&this.focus()}))}));const n=Kn.findOne(".modal.show");n&&Gr.getInstance(n).hide(),Gr.getOrCreateInstance(t).toggle(this)})),Vn(Gr),bn(Gr);const Zr=".bs.offcanvas",Jr=".data-api",eo=`load${Zr}${Jr}`,to="show",no="showing",io="hiding",ro=".offcanvas.show",oo=`show${Zr}`,so=`shown${Zr}`,ao=`hide${Zr}`,co=`hidePrevented${Zr}`,lo=`hidden${Zr}`,uo=`resize${Zr}`,ho=`click${Zr}${Jr}`,fo=`keydown.dismiss${Zr}`,po={backdrop:!0,keyboard:!0,scroll:!1},mo={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class go extends Wn{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return po}static get DefaultType(){return mo}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||Bn.trigger(this._element,oo,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Pr).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(no),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(to),this._element.classList.remove(no),Bn.trigger(this._element,so,{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(Bn.trigger(this._element,ao).defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(io),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove(to,io),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Pr).reset(),Bn.trigger(this._element,lo)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new Er({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():Bn.trigger(this._element,co)}:null})}_initializeFocusTrap(){return new Or({trapElement:this._element})}_addEventListeners(){Bn.on(this._element,fo,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():Bn.trigger(this._element,co))}))}static jQueryInterface(e){return this.each((function(){const t=go.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Bn.on(document,ho,'[data-bs-toggle="offcanvas"]',(function(e){const t=Kn.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),hn(this))return;Bn.one(t,lo,(()=>{dn(this)&&this.focus()}));const n=Kn.findOne(ro);n&&n!==t&&go.getInstance(n).hide(),go.getOrCreateInstance(t).toggle(this)})),Bn.on(window,eo,(()=>{for(const e of Kn.find(ro))go.getOrCreateInstance(e).show()})),Bn.on(window,uo,(()=>{for(const e of Kn.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&go.getOrCreateInstance(e).hide()})),Vn(go),bn(go);const vo={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},_o=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),bo=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,yo=(e,t)=>{const n=e.nodeName.toLowerCase();return t.includes(n)?!_o.has(n)||Boolean(bo.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(n)))},wo={allowList:vo,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Eo={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},ko={entry:"(string|element|function|null)",selector:"(string|element)"};class xo extends Un{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return wo}static get DefaultType(){return Eo}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,n]of Object.entries(this._config.content))this._setContent(e,n,t);const t=e.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&t.classList.add(...n.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,n]of Object.entries(e))super._typeCheckConfig({selector:t,entry:n},ko)}_setContent(e,t,n){const i=Kn.findOne(n,e);i&&((t=this._resolvePossibleFunction(t))?ln(t)?this._putElementInTemplate(un(t),i):this._config.html?i.innerHTML=this._maybeSanitize(t):i.textContent=t:i.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),r=[].concat(...i.body.querySelectorAll("*"));for(const e of r){const n=e.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){e.remove();continue}const i=[].concat(...e.attributes),r=[].concat(t["*"]||[],t[n]||[]);for(const t of i)yo(t,r)||e.removeAttribute(t.nodeName)}return i.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return yn(e,[this])}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const To=new Set(["sanitize","allowList","sanitizeFn"]),Ao="fade",So="show",Co=".modal",Oo="hide.bs.modal",Io="hover",Lo="focus",jo={AUTO:"auto",TOP:"top",RIGHT:_n()?"left":"right",BOTTOM:"bottom",LEFT:_n()?"right":"left"},Mo={allowList:vo,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Po={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class No extends Wn{constructor(e,n){if(void 0===t)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,n),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return Mo}static get DefaultType(){return Po}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),Bn.off(this._element.closest(Co),Oo,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=Bn.trigger(this._element,this.constructor.eventName("show")),t=(fn(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),Bn.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(n),n.classList.add(So),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))Bn.on(e,"mouseover",pn);this._queueCallback((()=>{Bn.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(this._isShown()&&!Bn.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(So),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))Bn.off(e,"mouseover",pn);this._activeTrigger.click=!1,this._activeTrigger[Lo]=!1,this._activeTrigger[Io]=!1,this._isHovered=null,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),Bn.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(Ao,So),t.classList.add(`bs-${this.constructor.NAME}-auto`);const n=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",n),this._isAnimated()&&t.classList.add(Ao),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new xo({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(Ao)}_isShown(){return this.tip&&this.tip.classList.contains(So)}_createPopper(e){const t=yn(this._config.placement,[this,e,this._element]),n=jo[t.toUpperCase()];return tn(this._element,e,this._getPopperConfig(n))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return yn(e,[this._element])}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,...yn(this._config.popperConfig,[t])}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)Bn.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===Io?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),n=t===Io?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");Bn.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?Lo:Io]=!0,t._enter()})),Bn.on(this._element,n,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?Lo:Io]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},Bn.on(this._element.closest(Co),Oo,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=qn.getDataAttributes(this._element);for(const e of Object.keys(t))To.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:un(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const[t,n]of Object.entries(this._config))this.constructor.Default[t]!==n&&(e[t]=n);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=No.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}bn(No);const Do={...No.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},$o={...No.DefaultType,content:"(null|string|element|function)"};class Bo extends No{static get Default(){return Do}static get DefaultType(){return $o}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=Bo.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}bn(Bo);const Ho=".bs.scrollspy",zo=`activate${Ho}`,Fo=`click${Ho}`,qo=`load${Ho}.data-api`,Uo="active",Wo="[href]",Ro=".nav-link",Ko=`${Ro}, .nav-item > ${Ro}, .list-group-item`,Vo={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Yo={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Qo extends Wn{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Vo}static get DefaultType(){return Yo}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=un(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(Bn.off(this._config.target,Fo),Bn.on(this._config.target,Fo,Wo,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const n=this._rootElement||window,i=t.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i,behavior:"smooth"});n.scrollTop=i}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),n=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},i=(this._rootElement||document.documentElement).scrollTop,r=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const o of e){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(o));continue}const e=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(r&&e){if(n(o),!i)return}else r||e||n(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=Kn.find(Wo,this._config.target);for(const t of e){if(!t.hash||hn(t))continue;const e=Kn.findOne(decodeURI(t.hash),this._element);dn(e)&&(this._targetLinks.set(decodeURI(t.hash),t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(Uo),this._activateParents(e),Bn.trigger(this._element,zo,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))Kn.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(Uo);else for(const t of Kn.parents(e,".nav, .list-group"))for(const e of Kn.prev(t,Ko))e.classList.add(Uo)}_clearActiveClass(e){e.classList.remove(Uo);const t=Kn.find(`${Wo}.${Uo}`,e);for(const e of t)e.classList.remove(Uo)}static jQueryInterface(e){return this.each((function(){const t=Qo.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Bn.on(window,qo,(()=>{for(const e of Kn.find('[data-bs-spy="scroll"]'))Qo.getOrCreateInstance(e)})),bn(Qo);const Xo=".bs.tab",Go=`hide${Xo}`,Zo=`hidden${Xo}`,Jo=`show${Xo}`,es=`shown${Xo}`,ts=`click${Xo}`,ns=`keydown${Xo}`,is=`load${Xo}`,rs="ArrowLeft",os="ArrowRight",ss="ArrowUp",as="ArrowDown",cs="Home",ls="End",us="active",ds="fade",hs="show",fs=":not(.dropdown-toggle)",ps='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',ms=`.nav-link${fs}, .list-group-item${fs}, [role="tab"]${fs}, ${ps}`,gs=`.${us}[data-bs-toggle="tab"], .${us}[data-bs-toggle="pill"], .${us}[data-bs-toggle="list"]`;class vs extends Wn{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),Bn.on(this._element,ns,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),n=t?Bn.trigger(t,Go,{relatedTarget:e}):null;Bn.trigger(e,Jo,{relatedTarget:t}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){e&&(e.classList.add(us),this._activate(Kn.getElementFromSelector(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),Bn.trigger(e,es,{relatedTarget:t})):e.classList.add(hs)}),e,e.classList.contains(ds)))}_deactivate(e,t){e&&(e.classList.remove(us),e.blur(),this._deactivate(Kn.getElementFromSelector(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),Bn.trigger(e,Zo,{relatedTarget:t})):e.classList.remove(hs)}),e,e.classList.contains(ds)))}_keydown(e){if(![rs,os,ss,as,cs,ls].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=this._getChildren().filter((e=>!hn(e)));let n;if([cs,ls].includes(e.key))n=t[e.key===cs?0:t.length-1];else{const i=[os,as].includes(e.key);n=En(t,e.target,i,!0)}n&&(n.focus({preventScroll:!0}),vs.getOrCreateInstance(n).show())}_getChildren(){return Kn.find(ms,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=Kn.getElementFromSelector(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`${e.id}`))}_toggleDropDown(e,t){const n=this._getOuterElement(e);if(!n.classList.contains("dropdown"))return;const i=(e,i)=>{const r=Kn.findOne(e,n);r&&r.classList.toggle(i,t)};i(".dropdown-toggle",us),i(".dropdown-menu",hs),n.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}_elemIsActive(e){return e.classList.contains(us)}_getInnerElement(e){return e.matches(ms)?e:Kn.findOne(ms,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=vs.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Bn.on(document,ts,ps,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),hn(this)||vs.getOrCreateInstance(this).show()})),Bn.on(window,is,(()=>{for(const e of Kn.find(gs))vs.getOrCreateInstance(e)})),bn(vs);const _s=".bs.toast",bs=`mouseover${_s}`,ys=`mouseout${_s}`,ws=`focusin${_s}`,Es=`focusout${_s}`,ks=`hide${_s}`,xs=`hidden${_s}`,Ts=`show${_s}`,As=`shown${_s}`,Ss="hide",Cs="show",Os="showing",Is={animation:"boolean",autohide:"boolean",delay:"number"},Ls={animation:!0,autohide:!0,delay:5e3};class js extends Wn{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Ls}static get DefaultType(){return Is}static get NAME(){return"toast"}show(){Bn.trigger(this._element,Ts).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(Ss),mn(this._element),this._element.classList.add(Cs,Os),this._queueCallback((()=>{this._element.classList.remove(Os),Bn.trigger(this._element,As),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(Bn.trigger(this._element,ks).defaultPrevented||(this._element.classList.add(Os),this._queueCallback((()=>{this._element.classList.add(Ss),this._element.classList.remove(Os,Cs),Bn.trigger(this._element,xs)}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Cs),super.dispose()}isShown(){return this._element.classList.contains(Cs)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){Bn.on(this._element,bs,(e=>this._onInteraction(e,!0))),Bn.on(this._element,ys,(e=>this._onInteraction(e,!1))),Bn.on(this._element,ws,(e=>this._onInteraction(e,!0))),Bn.on(this._element,Es,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=js.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Vn(js),bn(js);var Ms,Ps,Ns,Ds,$s,Bs,Hs,zs,Fs=function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))},qs=function(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},Us=0,Ws=0,Rs=0,Ks=0;function Vs(){return Rs}var Ys=0,Qs=0,Xs=0;function Gs(){return Ys}function Zs(){return Qs}function Js(){return Xs}function ea(){var e,t,n,i,r=Us;Ys=t=2*r,console.log("Proteini: ".concat(t)),Xs=n=1*r,console.log("MASsti: ".concat(n)),e=Hs-(4*Gs()+9*Js()),Qs=i=e/4,console.log("UH: ".concat(i))}function ta(e){return Fs(this,void 0,void 0,(function(){return qs(this,(function(t){switch($s){case"Neaktivan":Hs=Math.round(1.2*e);break;case"Slabo aktivan":Hs=Math.round(1.375*e);break;case"Umereno aktivan":Hs=Math.round(1.55*e);break;case"Veoma aktivan":Hs=Math.round(1.725*e);break;case"Ekstremno aktivan":Hs=Math.round(1.9*e)}return console.log("zavrsio sam calculateTdee sada"),[2]}))}))}function na(e,t){console.log("Usao sam u fju!");var n=document.getElementById("results");n&&(n.style.display="block");var i=document.querySelector(".bmr"),r=document.querySelector(".tdee"),o=document.querySelector(".maintain"),s=document.querySelector(".lose-1lb"),a=document.querySelector(".lose-oneandhalflb"),c=document.querySelector(".lose-2lb"),l=document.querySelector(".gain-1lb"),u=document.querySelector(".gain-oneandhalflb"),d=document.querySelector(".gain-2lb");i&&(i.innerHTML=""),r&&(r.innerHTML=""),o&&(o.innerHTML=""),s&&(s.innerHTML=""),a&&(a.innerHTML=""),c&&(c.innerHTML=""),l&&(l.innerHTML=""),u&&(u.innerHTML=""),d&&(d.innerHTML="");var h=document.getElementById("loading");h&&(h.style.display="none"),console.log(t),console.log(e),i&&void 0!==e&&(i.innerHTML+="  BMR:  ".concat(e)),r&&void 0!==t&&(r.innerHTML+="  TDEE: ".concat(t),Rs=t,Ks=t),r&&void 0!==t&&(o.innerHTML+=" ".concat(t," Calories")),r&&void 0!==t&&(s.innerHTML+=" ".concat(t-500," Calories")),r&&void 0!==t&&(a.innerHTML+=" ".concat(t-750," Calories")),r&&void 0!==t&&(c.innerHTML+=" ".concat(t-1e3," Calories")),r&&void 0!==t&&(l.innerHTML+=" ".concat(t+500," Calories")),r&&void 0!==t&&(u.innerHTML+=" ".concat(t+750," Calories")),r&&void 0!==t&&(c.innerHTML+=" ".concat(t+1e3," Calories"))}function ia(){var e=document.querySelector(".alert");e&&e.remove()}ie(document.querySelectorAll('input[name="opcije"]'),"change").pipe(Q((function(e){return e.target.value}))).subscribe((function(e){switch(e){case"gubim05":Rs=Ks-500;break;case"gubim075":Rs=Ks-750;break;case"gubim1":Rs=Ks-1e3;break;case"dodajem05":Rs=Ks+500;break;case"dodajem075":Rs=Ks+750;break;case"dodajem1":Rs=Ks+1e3;break;case"odrzavanje":Rs=Ks}console.log("Sada je vrednost za tdePublic:",Rs)}));var ra=function(){function e(){}return e.getFood=function(e){return ye(fetch("http://localhost:3000/groceries/"+e).then((function(e){if(!e.ok)throw new Error("Food not found!");return e.json()})).catch((function(e){throw console.error(e),e})))},e.prikaziDivNeuspesnoBrisanje=function(){var e=document.getElementById("namirnicaInput").value,t=document.getElementById("uspesnoBrisanje");document.getElementById("slikaZaBrisanje").src="slike/close.png";var n=document.getElementById("BrisanjeNamirniceh3");console.log("Namirnica za brisanje ima vrednost : ".concat(e," ")),n.textContent=""==e?"Unesite naziv namirnice koju zelite da izbacite iz korpe":"Namirnica ".concat(e," se ne nalazi u korpi"),t&&(t.style.display="block")},e.prikaziDivUspesnoBrisanje=function(){var e=document.getElementById("namirnicaInput").value,t=document.getElementById("uspesnoBrisanje"),n=document.getElementById("slikaZaBrisanje");document.getElementById("BrisanjeNamirniceh3").textContent="Obrisali ste namirnicu ".concat(e),n.src="slike/checked.png",t?t.style.display="block":console.log("Nije pronadjen ")},e.prikaziSlike=function(){var e,t,n=document.getElementById("slika");(void 0===(e=3e3)&&(e=0),void 0===t&&(t=ue),e<0&&(e=0),function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=de);var i=-1;return null!=t&&(we(t)?n=t:i=t),new N((function(t){var r,o=(r=e)instanceof Date&&!isNaN(r)?+e-n.now():e;o<0&&(o=0);var s=0;return n.schedule((function(){t.closed||(t.next(s++),0<=i?this.schedule(void 0,i):t.complete())}),o)}))}(e,e,t)).pipe(Q((function(){var e=Math.floor(16*Math.random());switch(console.log(e),e){case 0:return"slike/oats.png";case 1:return"slike1/bananas.png";case 2:return"slike1/pancakes.png";case 3:return"slike1/potato.png";case 4:return"slike1/rice.png";case 5:return"slike1/turkey.png";case 6:return"slike1/trout.png";case 7:return"slike1/pizza.png";case 8:return"slike2/fast-food.png";case 9:return"slike2/fish.png";case 10:return"slike2/hamburger.png";case 11:return"slike2/honey.png";case 12:return"slike2/pancakes.png";case 13:return"slike2/salad.png";case 14:return"slike2/spaguetti.png";case 15:return"slike2/steak.png"}}))).subscribe({next:function(e){n.src=e},complete:function(){console.log("Observable je završio emitovanje.")}})},e.ocistiKorpu=function(){var e=document.getElementById("brisanjeSvihNamirnica"),t=document.getElementById("naslovObrisanenamirnice");0==localStorage.length?t.textContent="Korpa je vec prazna!":(localStorage.clear(),t.textContent="Namirnice su obrisane!"),e.style.display="block",setTimeout((function(){e.style.display="none"}),2e3)},e.procitajIzLocalStorage=function(){var e=document.getElementById("popup"),t=document.getElementById("popup-namirnice");t.innerHTML="";var n,i=0,r=0,o=0,s=0,a=Gs();console.log("Gornja granica proteina "+a);for(var c,l,u,d=Zs(),h=Js(),f=0;f<localStorage.length;f++){var p=localStorage.key(f),m=localStorage.getItem(p);try{for(var g=JSON.parse(m),v={Proteini:g.P,Masti:g.M,"Ugljeni hidrati":g.UH,Kcal:g.Kcal,Kolicina:g.Gramaza+" g"},_=this.prvoVelikoSLovo(p),b='<span style="font-weight: bold;">'.concat(_,"</span>: "),y=0,w=Object.entries(v);y<w.length;y++){var E=w[y],k=E[0],x=E[1];b+='<span style="color: black;"> '.concat(k,':  </span>  <span style="color: green;"> ').concat(x,",  </span>  ")}t.innerHTML+="<div>".concat(b,"</div>"),i+=v.Proteini,r+=v.Masti,o+=v["Ugljeni hidrati"],s+=v.Kcal}catch(e){t.innerHTML+="<div>".concat(p,": ").concat(m,"</div>")}}t.innerHTML+=' <hr style="width: 100%; margin: 3 auto; border-top: 2px solid black;">',i=parseFloat(i.toFixed(2)),r=parseFloat(r.toFixed(2)),o=parseFloat(o.toFixed(2)),s=parseFloat(s.toFixed(2)),n=(Vs()-s).toFixed(2),c=(a-i).toFixed(2),l=(d-o).toFixed(2),u=(h-r).toFixed(2),document.querySelector(".bmr"),t.innerHTML+='<div style="text-align: right;"> <button class="btn btn-primary" id="dugmenceMoje"> Nacrtaj liniju </button> </div>',t.innerHTML+='   <div style="text-align: center;" > <span style="font-weight: bold;"> Vas TDEE: </span> '.concat(Vs()," </div>"),t.innerHTML+=' <div  style="text-align: center;">   <span style="font-weight: bold;">  Dnevni unos  </span> :   Proteina   <span style="color: green;"> '.concat(a,'g </span>,\n            UH:  <span style="color: green;">  ').concat(d,'g </span>,\n            Masti: <span style="color: green;">   ').concat(h,"g  </span>   </div> "),t.innerHTML+="<div >  <br>  </div> ",t.innerHTML+=' <div style="text-align: center;" > <span style="font-weight: bold;">  Do sada ste uneli: </span> </div>',t.innerHTML+='<div style="text-align: center;"> \n        Proteini:  <span style="color:  '.concat(s<Vs()&&i<a?"green":"red",' ;"> ').concat(i,'g </span>,\n        Ugljeni hidrati:  <span style="color:  ').concat(s<Vs()&&o<d?"green":"red",' ;">').concat(o,'g </span> , \n        Masti:  <span style="color:  ').concat(s<Vs()&&r<h?"green":"red",' ;"> ').concat(r,'g</span> ,\n        Kcal: <span style="color:  ').concat(s<Vs()?"green":"red",' ;">  ').concat(s,'</span>  </div>\n        <div style="text-align:center "> <span style="color: red; font-weight: bold;"> ').concat(s>Vs()?"PREKORACILI STE DNEVNI UNOS":"","  </div>"),t.innerHTML+="<div >  <br>  </div> ";var T=parseFloat(c),A=parseFloat(l),S=parseFloat(u);t.innerHTML+=" \n        ".concat(s<Vs()?'<div style="text-align: center;" > <span style="font-weight: bold;">  Da biste zadovoljili dnevni unos potrebno je uneti jos: </span> </div>\n        <div style="text-align: center;" >\n        Proteina <span style="color: '.concat(T<0?"red":"green",';">').concat(T,' g</span>\n        \n        Ugljeni hidrati <span style="color: ').concat(A<0?"red":"green",';">').concat(A,' g</span>\n        Masti <span style="color: ').concat(S<0?"red":"green",';">').concat(S,' g</span>\n\n        Kalorija <span style="color: green;">:  ').concat(n,"  </span> \n        </div>"):'<div style="text-align: center; ">\n               <img  src="./slike/close.png" alt="Slika" style="width: 100px; height:100px;">\n          </div>'),e.style.display="block"},e.prvoVelikoSLovo=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},e.nacrtajLiniju=function(){document.querySelector(".dugmenceMoje")&&console.log("nadjeno")},e}(),oa=function(){function e(){this._proteini=0,this._ugljeniHidrati=0,this._masti=0,this._kalorije=0}return Object.defineProperty(e.prototype,"proteini",{get:function(){return this._proteini},set:function(e){this._proteini=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"ugljeniHidrati",{get:function(){return this._ugljeniHidrati},set:function(e){this._ugljeniHidrati=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"masti",{get:function(){return this._masti},set:function(e){this._masti=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"kalorije",{get:function(){return this._kalorije},set:function(e){this._kalorije=e},enumerable:!1,configurable:!0}),e}(),sa="prazan";function aa(){return sa}var ca=function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))},la=function(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};function ua(){document.getElementById("popup").style.display="none"}ra.prikaziSlike();var da=document.getElementById("ZatvoriPopupBtn");document.getElementById("ZatvoriPopup1").addEventListener("click",(function(){ua()})),da.addEventListener("click",(function(){console.log("aaa"),ua()}));var ha=document.getElementById("namirnicaInput"),fa=document.getElementById("dugmeObrisiNamirnicu"),pa="";function ma(){document.getElementById("modal").style.display="none"}document.getElementById("zatvoriDodavanjeNamirnica").addEventListener("click",(function(){ma()}));var ga=document.getElementById("close");function va(){return ca(this,void 0,void 0,(function(){var e;return la(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,,4]),[4,fetch("../groceries-db.json")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent().groceries];case 3:return e=t.sent(),console.error("Error fetching groceries:",e),[2,[]];case 4:return[2]}}))}))}function _a(){return ca(this,void 0,void 0,(function(){var e,t,n,i;return la(this,(function(r){switch(r.label){case 0:return ba=2,console.log(ya),console.log("Uso sam nacrtajTabelu"),[4,va()];case 1:return e=r.sent(),t=document.createElement("thead"),(n=document.createElement("tr")).innerHTML="\n  <th> </>\n  <th>Naziv</th>\n  <th>Proteini (g)</th>\n  <th>Ugljeni hidrati (g)</th>\n  <th>Masti (g)</th>\n  <th>Kcal/100g</th>\n",t.appendChild(n),Ea.appendChild(t),i=document.createElement("tbody"),e.forEach((function(e,t){var n=document.createElement("tr");n.innerHTML="\n    <td >".concat(t+1+".","</td>\n   \n    <td>").concat(e.name,"</td>\n    <td>").concat(e.P,"</td>\n    <td>").concat(e.UH,"</td>\n    <td>").concat(e.M,"</td>\n    <td>").concat(e.Kcal,"</td>\n  "),i.appendChild(n)})),Ea.appendChild(i),Ea.style.display="block",[2]}}))}))}ga&&ga.addEventListener("click",(function(){ma()}));var ba=1,ya=!1,wa=document.getElementById("dugmeVratiSveNamirnice"),Ea=document.getElementById("tabela-namirnica");wa&&wa.addEventListener("click",(function(){console.log("Flag kad se klikne je : ".concat(ba)),function(e,t){ca(this,void 0,void 0,(function(){return la(this,(function(n){try{if("block"===e.style.display)return e.style.display="none",[2];1===t?(t=2,_a()):(e.style.width="100%",e.style.display="block")}catch(e){console.error("Error fetching and printing groceries:",e)}return[2]}))}))}(Ea,ba)})),ha&&ha.addEventListener("input",(function(){pa=ha.value,console.log(pa)})),fa&&fa.addEventListener("click",(function(){var e=function(e){console.log(e);var t=localStorage.getItem(e);return localStorage.removeItem(e),null!==t}(pa);1==e?ra.prikaziDivUspesnoBrisanje():ra.prikaziDivNeuspesnoBrisanje()})),document.getElementById("zatvoriUspesnoBrisanjeBtn").addEventListener("click",(function(){document.getElementById("uspesnoBrisanje").style.display="none"})),document.getElementById("hideSectionRadio"),document.querySelector(".zaPrikaz"),window.toggleSection=function(e){document.querySelectorAll(".zaPrikaz").forEach((function(e){e.style.display="none"}));var t=document.getElementById(e);t instanceof HTMLElement&&(t.style.display="block")},function(){var e=document.querySelector(".labelUnos"),t=document.querySelector(".labelGrami"),n="",i=document.querySelector(".prikazProteina"),r=document.querySelector(".prikazHidrata"),o=document.querySelector(".prikazMasti"),s=document.querySelector(".prikazKalorija"),a=document.getElementById("nextPageButton"),c=document.querySelector(".labelUnos"),l=document.querySelector(".labelGrami"),u=ie(c,"input").pipe(he(500),Q((function(e){return e.target.value}))),d=ie(l,"input").pipe(he(500),Q((function(e){return parseFloat(e.target.value)}))),h=0,f=0,p=0,m=0,g=new oa;function v(e){return isNaN(e)?(console.log(" vracao 0  "),"0"):(console.log(e),console.log(" U else sam "),e.toString())}ke([u,d]).pipe(G((function(e){var t=e[0],n=e[1];return ye(ra.getFood(t)).pipe(Te((function(e){return console.error(e),Ae})),Q((function(e){return g.proteini=parseFloat((n/100*e.P).toFixed(2)),g.ugljeniHidrati=parseFloat((n/100*e.UH).toFixed(2)),g.masti=parseFloat((n/100*e.M).toFixed(2)),g.kalorije=parseFloat((n/100*e.Kcal).toFixed(2)),h=g.proteini,f=g.ugljeniHidrati,p=g.masti,m=g.kalorije,{proteinNa100g:v(h),hidratNa100g:v(f),mastNa100g:v(p),kalorijeNa100g:v(m)}})))}))).subscribe((function(e){i.innerHTML=h.toString()+"g",r.innerHTML=f.toString()+"g",o.innerHTML=p.toString()+"g",s.innerHTML=m.toString()+"g"})),a.addEventListener("click",(function(){var e=document.getElementById("infoNamirnica").value;if(console.log("Ime namirnice ".concat(e)),""!=e)fetch("http://localhost:3002/groceries"+"/".concat(e)).then((function(e){if(!e.ok)throw new Error("Food not found!");return e.json()})).then((function(t){var n;sa=e,n=document.getElementById("imeNamirnice"),fetch("http://localhost:3002/groceries"+"/".concat(sa)).then((function(e){if(!e.ok)throw new Error("Food not found!");return e.json()})).then((function(e){var t=document.getElementById("divInfoPage");console.log("Usao sam u promise.then");var i=document.getElementById("opis-namirnice");i.readOnly=!0,i.textContent=e.Opis,document.getElementById("SlikaNamirnice").src=e.Slika,console.log(e.Masti),n.textContent=e.naziv,document.getElementById("tabela-namirnice").innerHTML='\n            <thead>\n                <tr>\n                    <th> </th>\n                    <th style="text-align:center" >Naziv</th>\n                    <th style="text-align:center">Proteini (g)</th>\n                    <th style="text-align:center">Ugljeni hidrati (g)</th>\n                    <th style="text-align:center">Masti (g)</th>\n                    <th style="text-align:center" >Kcal/100g</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td> </td>\n                    <td style="text-align:center">'.concat(e.naziv,'</td>\n                    <td style="text-align:center">').concat(e.Proteini,'</td>\n                    <td style="text-align:center">').concat(e["Ugljeni hidrati"],'</td>\n                    <td style="text-align:center">').concat(e.Masti,'</td>\n                    <td style="text-align:center" >').concat(e.Kalorije,"</td>\n                </tr>\n            </tbody>\n        "),t.style.display="block"})),console.log(aa)})).catch((function(t){console.log(t);var n=document.getElementById("moreInfo");document.getElementById("infoNamirnice").textContent="Namirnica ".concat(e," ne postoji u bazi"),n.style.display="block"}));else{var t=document.getElementById("moreInfo");document.getElementById("infoNamirnice").textContent="Input polje ne sme da bude prazno!",t.style.display="block"}})),document.getElementById("zatvoriMoreInfo").addEventListener("click",(function(){document.getElementById("moreInfo").style.display="none"})),e?e.addEventListener("input",(function(){n=e.value,console.log(n)})):console.error('Element sa ID-om "labelUnos" nije pronađen.'),t&&t.addEventListener("input",(function(){console.log(t.value)})),document.querySelector(".labelP")&&console.log("Pronadjen je element"),ha.addEventListener("input",(function(){pa=ha.value,console.log(pa)}));var _=document.getElementById("dugmeDodaj");_&&(console.log("Input za kolicinu : ".concat(t.value)),ie(_,"click").subscribe((function(){var e={id:n,name:pa,P:parseFloat(i.innerHTML),UH:parseFloat(r.innerHTML),M:parseFloat(o.innerHTML),Kcal:parseFloat(s.innerHTML),Opis:"",Gramaza:parseFloat(t.value)},a=document.getElementById("modal"),c=document.getElementById("dodavanjeNamirnice"),l=(document.getElementById(".labelUnos"),document.getElementById("slikaDodavanje"));""!=n&&""!=t.value?fetch("http://localhost:3000/groceries"+"/".concat(n)).then((function(e){if(!e.ok)throw new Error("Food not found!");return e.json()})).then((function(t){var i;i=e,console.log("Pozvana je fja upisiUlocalstorage i vrenodsti objekta su  \n    ".concat(i.id,"   ").concat(i.name,", ").concat(i.P," ").concat(i.UH," ").concat(i.M," ").concat(i.Kcal," ")),localStorage.setItem(i.id,JSON.stringify(i)),console.log("Usao sam u uspesno"),c.textContent="Uspesno ste dodali ".concat(n),l.src="slike/checked.png",setTimeout(ma,3e3)})).catch((function(e){c.textContent="Namirnica ".concat(n," se ne nalazi u bazi"),l.src="slike/close.png"})):(c.textContent="Input polja ne smeju da budu prazna!",l.src="slike/close.png"),a.style.display="block"})));var b=document.getElementById("dugmeProcitaj");b&&b.addEventListener("click",(function(){ra.procitajIzLocalStorage()}));var y=document.getElementById("obrisiKonzolu");y&&y.addEventListener("click",(function(){console.clear();var e=document.getElementById("obrisanaPoruka");e&&(e.style.display="block",setTimeout((function(){e.style.display="none"}),3e3))}));var w=document.getElementById("dugmeObrisiSveIzSveske");w&&(console.log("radi"),w.addEventListener("click",(function(){ra.ocistiKorpu()})))}();var ka=document.getElementById("calculate");ka&&ka.addEventListener("click",(function(){console.log("Pozivam calculate  bmr"),function(){Fs(this,void 0,void 0,(function(){return qs(this,(function(e){switch(e.label){case 0:return Ms=parseInt(document.getElementById("age").value),Ps=document.getElementById("weight").value,Ns=parseInt(document.getElementById("height-feet").value),Ds=document.getElementById("gender").value,$s=document.getElementById("activity").value,zs=document.getElementById("breast-feeding").value,function(e,t){void 0!==e&&(Us=parseFloat(e),console.log(Us)),void 0!==t&&(Ws=t)}(Ps,Ns),isNaN(Ms)||void 0===Ps?(function(e){var t=document.getElementById("results");t&&(t.style.display="none");var n=document.getElementById("loading");n&&(n.style.display="none");var i=document.createElement("div"),r=document.querySelector(".myForm"),o=document.querySelector(".field");i.className="alert alert-danger",i.appendChild(document.createTextNode("Please fill out all fields before submitting")),r&&o&&r.insertBefore(i,o),setTimeout(ia,5e3)}(),[3,4]):[3,1];case 1:return document.querySelector(".submit"),"Zenski"!==Ds?[3,2]:(Bs=655+9.6*Us+1.8*Ws-4.7*Ms,Bs=Math.round(Bs),ta("Da"===zs?Bs+=450:Bs),ea(),na(Bs,Hs),[3,4]);case 2:return console.log(Ds,Ms,Ps,Us,Ws),Bs=66+13.7*Us+5*Ws-6.8*Ms,[4,ta(Bs=Math.round(Bs))];case 3:e.sent(),console.log("zavrsio sam calculateTdee i pozivam izracunaj gornje vrednosti nutrienata"),ea(),na(Bs,Hs),e.label=4;case 4:return[2]}}))}))}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,